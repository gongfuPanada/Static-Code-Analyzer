Parameters : Source2.txt Queries2-2.txt ResultQueries2-2.xml
Beginning to parse Simple Program.
Begin CodeParser
End CodeParser
Begin DesignExtractor
DE: Extracted Relationships
Building CFG
End DesignExtractor
End of parsing Simple Program.
iteration0
Beginning to evaluate Query File.
New Category :  Iteration 2 requirements including Follows* and Parent* relationships
1 - Follows*, Typed, ImplStmtLine ::
while w; stmt s; 
Select w such that Follows*(s, w)
4,7,9,11,16
5000
Evaluating query 1 - Follows*, Typed, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(s, w)

 EVALUATING FOLLOWS* (s w)
In intersect Pairs: both do not exist
Insert links for tk1 =s
IN INSERT LINKS INSERTING TOKEN = s
s Not Found in Linkages and relIndex = 0
Insert links for tk2 = w
IN INSERT LINKS INSERTING TOKEN = w
w Not Found in Linkages and relIndex = 0
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = w p.size = 6
FIRST PARAM = s
SECOND PARAM = w
it2->ans2 = 16
it2->ans2 = 11
it2->ans2 = 9
it2->ans2 = 9
it2->ans2 = 7
it2->ans2 = 4
RETURNING FINAL ANSWERS
End evaluate query




Your answer: 4 7 9 11 16 
Correct answer: 4 7 9 11 16 
2 - Follows*, Typed, ImplStmtLine :: 
while w; stmt s; 
Select w such that Follows*(w, s)
4,5,7,9,11,12,16
5000
Evaluating query 2 - Follows*, Typed, ImplStmtLine :: 
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(w, s)

 EVALUATING FOLLOWS* (w s)
In intersect Pairs: both do not exist
Insert links for tk1 =w
IN INSERT LINKS INSERTING TOKEN = w
w Not Found in Linkages and relIndex = 0
Insert links for tk2 = s
IN INSERT LINKS INSERTING TOKEN = s
s Not Found in Linkages and relIndex = 0
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = w p.size = 10
FIRST PARAM = w
it2->ans1 = 16
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 11
it2->ans1 = 9
it2->ans1 = 7
it2->ans1 = 7
it2->ans1 = 5
it2->ans1 = 5
it2->ans1 = 4
RETURNING FINAL ANSWERS
End evaluate query




Your answer: 4 5 7 9 11 12 16 
Correct answer: 4 5 7 9 11 12 16 
3 - Follows*, ImplStmtLine ::
stmt s;
Select s such that Follows*(s, 3)
1,2
5000
Evaluating query 3 - Follows*, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(s, 3)

 EVALUATING FOLLOWS* (s 3)
Handling Follows*(type, stmtnum) with tk2 = 3
Calling getFollowedBy(type, stmtnum)
Evaluated StmtNumber = 2
Inserting StmtNumber 2 into the answer set
Calling getFollowedBy(type, stmtnum)
Evaluated StmtNumber = 1
Inserting StmtNumber 1 into the answer set
Calling getFollowedBy(type, stmtnum)
In intersect Pairs: both do not exist
Insert links for tk1 =s
IN INSERT LINKS INSERTING TOKEN = s
s Not Found in Linkages and relIndex = 0
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 2
FIRST PARAM = s
it2->ans1 = 1
it2->ans1 = 2
RETURNING FINAL ANSWERS
End evaluate query




Your answer: 1 2 
Correct answer: 1 2 
4 - Follows*, ImplStmtLine ::
stmt s; 
Select s such that Follows*(s, 20)
6,7,9
5000
Evaluating query 4 - Follows*, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(s, 20)

 EVALUATING FOLLOWS* (s 20)
Handling Follows*(type, stmtnum) with tk2 = 20
Calling getFollowedBy(type, stmtnum)
Evaluated StmtNumber = 9
Inserting StmtNumber 9 into the answer set
Calling getFollowedBy(type, stmtnum)
Evaluated StmtNumber = 7
Inserting StmtNumber 7 into the answer set
Calling getFollowedBy(type, stmtnum)
Evaluated StmtNumber = 6
Inserting StmtNumber 6 into the answer set
Calling getFollowedBy(type, stmtnum)
In intersect Pairs: both do not exist
Insert links for tk1 =s
IN INSERT LINKS INSERTING TOKEN = s
s Not Found in Linkages and relIndex = 0
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 3
FIRST PARAM = s
it2->ans1 = 6
it2->ans1 = 7
it2->ans1 = 9
RETURNING FINAL ANSWERS
End evaluate query




Your answer: 6 7 9 
Correct answer: 6 7 9 
5 - Follows*, Typed, ImplStmtLine ::
while w; 
Select w such that Follows*(w, 20)
7,9
5000
Evaluating query 5 - Follows*, Typed, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(w, 20)

 EVALUATING FOLLOWS* (w 20)
Handling Follows*(type, stmtnum) with tk2 = 20
Calling getFollowedBy(type, stmtnum)
Evaluated StmtNumber = 9
Inserting StmtNumber 9 into the answer set
Calling getFollowedBy(type, stmtnum)
Evaluated StmtNumber = 7
Inserting StmtNumber 7 into the answer set
Calling getFollowedBy(type, stmtnum)
Evaluated StmtNumber = 6
Calling getFollowedBy(type, stmtnum)
In intersect Pairs: both do not exist
Insert links for tk1 =w
IN INSERT LINKS INSERTING TOKEN = w
w Not Found in Linkages and relIndex = 0
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = w p.size = 2
FIRST PARAM = w
it2->ans1 = 7
it2->ans1 = 9
RETURNING FINAL ANSWERS
End evaluate query




Your answer: 7 9 
Correct answer: 7 9 
6 - Follows*, ImplStmtLine ::
stmt s;
Select s such that Follows*(4, s)
23
5000
Evaluating query 6 - Follows*, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(4, s)

 EVALUATING FOLLOWS* (4 s)
Handling Follows*(stmtnum, type)
Calling getFollows(type, stmtnum)
Calling getFollows(type, stmtnum)
In intersect Pairs: both do not exist
Insert links for tk2 = s
IN INSERT LINKS INSERTING TOKEN = s
s Not Found in Linkages and relIndex = 0
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 1
FIRST PARAM = 4
SECOND PARAM = s
it2->ans2 = 23
RETURNING FINAL ANSWERS
End evaluate query




Your answer: 23 
Correct answer: 23 
7 - Follows*, Typed, ImplStmtLine ::
while w; 
Select w such that Follows*(12, w)
16
5000
Evaluating query 7 - Follows*, Typed, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(12, w)

 EVALUATING FOLLOWS* (12 w)
Handling Follows*(stmtnum, type)
Calling getFollows(type, stmtnum)
Calling getFollows(type, stmtnum)
Calling getFollows(type, stmtnum)
In intersect Pairs: both do not exist
Insert links for tk2 = w
IN INSERT LINKS INSERTING TOKEN = w
w Not Found in Linkages and relIndex = 0
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = w p.size = 1
FIRST PARAM = 12
SECOND PARAM = w
it2->ans2 = 16
RETURNING FINAL ANSWERS
End evaluate query




Your answer: 16 
Correct answer: 16 
8 - Follows*, Boolean, ImplStmtLine ::

Select BOOLEAN such that Follows*(4, 19)
false
5000
Evaluating query 8 - Follows*, Boolean, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(4, 19)

 EVALUATING FOLLOWS* (4 19)
STMTNUM is 23
In intersect Pairs: both do not exist
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Found Relations to be False or Empty
End evaluate query




Your answer: false 
Correct answer: false 
9 - Parent*, ImplStmtLine ::
stmt s; 
Select s such that Parent*(s, 12)
4,5,9,11
5000
Evaluating query 9 - Parent*, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(s, 12)

 EVALUATING PARENT* (s 12)
Initialzing all Parent* variables
tk2 is Integer 12
TOKEN1 FOUND NOT TO EXIST IN LINKAGES
Set is Empty: 0
Insert stmtNum = 11 into set
Insert stmtNum = 9 into set
Insert stmtNum = 5 into set
Insert stmtNum = 4 into set
IN INSERT LINKS INSERTING TOKEN = s
s Not Found in Linkages and relIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 4
FIRST PARAM = s
it2->ans1 = 4
it2->ans1 = 5
it2->ans1 = 9
it2->ans1 = 11
RETURNING FINAL ANSWERS
End evaluate query




Your answer: 4 5 9 11 
Correct answer: 4 5 9 11 
10 - Parent*, ImplStmtLine ::
stmt s;
Select s such that Parent*(s, 11)
4,5,9
5000
Evaluating query 10 - Parent*, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(s, 11)

 EVALUATING PARENT* (s 11)
Initialzing all Parent* variables
tk2 is Integer 11
TOKEN1 FOUND NOT TO EXIST IN LINKAGES
Set is Empty: 0
Insert stmtNum = 9 into set
Insert stmtNum = 5 into set
Insert stmtNum = 4 into set
IN INSERT LINKS INSERTING TOKEN = s
s Not Found in Linkages and relIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 3
FIRST PARAM = s
it2->ans1 = 4
it2->ans1 = 5
it2->ans1 = 9
RETURNING FINAL ANSWERS
End evaluate query




Your answer: 4 5 9 
Correct answer: 4 5 9 
11 - Parent*, Typed, ImplStmtLine :: 
while w; stmt s; 
Select w such that Parent*(w, 15)
4,5,9,11,12
5000
Evaluating query 11 - Parent*, Typed, ImplStmtLine :: 
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(w, 15)

 EVALUATING PARENT* (w 15)
Initialzing all Parent* variables
tk2 is Integer 15
TOKEN1 FOUND NOT TO EXIST IN LINKAGES
Set is Empty: 0
Insert stmtNum = 12 into set
Insert stmtNum = 11 into set
Insert stmtNum = 9 into set
Insert stmtNum = 5 into set
Insert stmtNum = 4 into set
IN INSERT LINKS INSERTING TOKEN = w
w Not Found in Linkages and relIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = w p.size = 5
FIRST PARAM = w
it2->ans1 = 4
it2->ans1 = 5
it2->ans1 = 9
it2->ans1 = 11
it2->ans1 = 12
RETURNING FINAL ANSWERS
End evaluate query




Your answer: 4 5 9 11 12 
Correct answer: 4 5 9 11 12 
12 - Parent*, Typed, ImplStmtLine ::
while w; 
Select w such that Parent*(w, 17)
4,5,9,11,16
5000
Evaluating query 12 - Parent*, Typed, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(w, 17)

 EVALUATING PARENT* (w 17)
Initialzing all Parent* variables
tk2 is Integer 17
TOKEN1 FOUND NOT TO EXIST IN LINKAGES
Set is Empty: 0
Insert stmtNum = 16 into set
Insert stmtNum = 11 into set
Insert stmtNum = 9 into set
Insert stmtNum = 5 into set
Insert stmtNum = 4 into set
IN INSERT LINKS INSERTING TOKEN = w
w Not Found in Linkages and relIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = w p.size = 5
FIRST PARAM = w
it2->ans1 = 4
it2->ans1 = 5
it2->ans1 = 9
it2->ans1 = 11
it2->ans1 = 16
RETURNING FINAL ANSWERS
End evaluate query




Your answer: 4 5 9 11 16 
Correct answer: 4 5 9 11 16 
13 - Parent*, Boolean, ImplStmtLine ::

Select BOOLEAN such that Parent*(4, 17)
true
5000
Evaluating query 13 - Parent*, Boolean, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(4, 17)

 EVALUATING PARENT* (4 17)
Initialzing all Parent* variables
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS
End evaluate query




Your answer: true 
Correct answer: true 
14 - Parent*, Boolean, ImplStmtLine ::

Select BOOLEAN such that Parent*(11, 15)
true
5000
Evaluating query 14 - Parent*, Boolean, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(11, 15)

 EVALUATING PARENT* (11 15)
Initialzing all Parent* variables
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS
End evaluate query




Your answer: true 
Correct answer: true 
15 - Parent*, Boolean, ImplStmtLine ::

Select BOOLEAN such that Parent*(9, 18)
true
5000
Evaluating query 15 - Parent*, Boolean, ImplStmtLine ::
Begin parse query
End parse query
Begin evaluate query
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(9, 18)

 EVALUATING PARENT* (9 18)
Initialzing all Parent* variables
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS
End evaluate query




Your answer: true 
Correct answer: true 
End of evaluating Query File.
AutoTester Completed !
