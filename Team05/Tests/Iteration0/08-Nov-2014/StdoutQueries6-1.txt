Parameters : Source6.txt Queries6-1.txt ResultQueries6-1.xml
Beginning to parse Simple Program.
Begin CodeParser
End CodeParser
Begin DesignExtractor
DE: Extracted Relationships
Building CFG
End DesignExtractor
End of parsing Simple Program.
Iteration0
Beginning to evaluate Query File.
New Category :  Errors From Prototype Grading
1 - Uses ::
stmt s;
Select s such that Uses (s,"wrong")

5000
Evaluating query 1 - Uses ::
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(s, "wrong")

 EVALUATING USES (s "wrong")
In intersect Pairs: both do not exist
Insert links for tk1 =s
IN INSERT LINKS INSERTING TOKEN = s
s Not Found in Linkages and relIndex = 0
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
token in selectedSyn = s p.size = 0
FIRST PARAM = s
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
2 - Uses ::
stmt x;
Select x such that Uses(x,"left")
3, 5, 7, 8, 9, 18, 19, 20, 24, 26, 27, 29, 30, 33, 34
5000
Evaluating query 2 - Uses ::
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(x, "left")

 EVALUATING USES (x "left")
In intersect Pairs: both do not exist
Insert links for tk1 =x
IN INSERT LINKS INSERTING TOKEN = x
x Not Found in Linkages and relIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = x p.size = 15
FIRST PARAM = x
it2->ans1 = 3
it2->ans1 = 5
it2->ans1 = 7
it2->ans1 = 8
it2->ans1 = 9
it2->ans1 = 18
it2->ans1 = 19
it2->ans1 = 20
it2->ans1 = 24
it2->ans1 = 26
it2->ans1 = 27
it2->ans1 = 29
it2->ans1 = 30
it2->ans1 = 33
it2->ans1 = 34
RETURNING FINAL ANSWERS




Your answer: 3 5 7 8 9 18 19 20 24 26 27 29 30 33 34 
Correct answer: 3 5 7 8 9 18 19 20 24 26 27 29 30 33 34 
3 - Uses, Pattern ::
assign a;
Select a such that Uses(a,"x") pattern a("x",_"left+x"_)
18
5000
Evaluating query 3 - Uses, Pattern ::
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
pattern found
After Ordering Relations, r.size = 2
Initializing Variables
 
pattern("x", _"left+x"_)

 EVALUATING PATTERN
IN INSERT LINKS INSERTING TOKEN = a
a Not Found in Linkages and relIndex = 0
PATTERN WITH THE FOLLOWING ARGUMENTS: a "x" _"left+x"_
NOW AT PROG_LINE -1
NOW AT PROG_LINE -1
NOW AT PROG_LINE -1
NOW AT PROG_LINE 37
LHS: x
RHS: _left+x_
+ +
Recurse
x left
Different data values -> False
center +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 19
NOW AT PROG_LINE 19
NOW AT PROG_LINE 35
NOW AT PROG_LINE 35
NOW AT PROG_LINE 36
LHS: x
RHS: _left+x_
+ +
Recurse
iter left
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 35
NOW AT PROG_LINE 34
LHS: x
RHS: _left+x_
+ +
Recurse
+ left
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ left
Different number of children -> False
quota +
Different number of children -> False
+ +
Recurse
+ left
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x left
Different data values -> False
left +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 24
NOW AT PROG_LINE 24
NOW AT PROG_LINE 33
LHS: x
RHS: _left+x_
+ +
Recurse
+ left
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x left
Different data values -> False
left +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 26
NOW AT PROG_LINE 26
NOW AT PROG_LINE 27
NOW AT PROG_LINE 27
NOW AT PROG_LINE 32
LHS: x
RHS: _left+x_
+ +
Recurse
x left
Different data values -> False
3 +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 29
NOW AT PROG_LINE 29
NOW AT PROG_LINE 31
LHS: x
RHS: _left+x_
+ +
Recurse
right left
Different data values -> False
5 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 30
LHS: x
RHS: _left+x_
+ +
Recurse
+ left
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ left
Different number of children -> False
quota +
Different number of children -> False
+ +
Recurse
+ left
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x left
Different data values -> False
left +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 29
NOW AT PROG_LINE 28
LHS: x
RHS: _left+x_
+ +
Recurse
right left
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 27
NOW AT PROG_LINE 26
NOW AT PROG_LINE 25
LHS: x
RHS: _left+x_
+ +
Recurse
x left
Different data values -> False
1 +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 24
NOW AT PROG_LINE 22
NOW AT PROG_LINE 22
NOW AT PROG_LINE 23
LHS: x
RHS: _left+x_
+ +
Recurse
iter left
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 22
NOW AT PROG_LINE 21
LHS: x
RHS: _left+x_
+ +
Recurse
temp left
Different data values -> False
7 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 20
LHS: x
RHS: _left+x_
+ +
Recurse
+ left
Different number of children -> False
left +
Different number of children -> False
+ +
Recurse
+ left
Different number of children -> False
2 +
Different number of children -> False
+ +
Recurse
right left
Different data values -> False
3 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 19
NOW AT PROG_LINE 18
LHS: x
RHS: _left+x_
+ +
Recurse
+ left
Different number of children -> False
5 +
Different number of children -> False
+ +
Recurse
+ left
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ left
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
left left
Same node and leaf of tree
x x
Same node and leaf of tree
NOW AT PROG_LINE 8
NOW AT PROG_LINE 8
NOW AT PROG_LINE 17
LHS: x
RHS: _left+x_
+ +
Recurse
temp left
Different data values -> False
6 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 16
LHS: x
RHS: _left+x_
+ +
Recurse
iter left
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 15
LHS: x
RHS: _left+x_
+ +
Recurse
temp left
Different data values -> False
5 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 14
LHS: x
RHS: _left+x_
+ +
Recurse
temp left
Different data values -> False
4 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 13
LHS: x
RHS: _left+x_
+ +
Recurse
right left
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 12
LHS: x
RHS: _left+x_
+ +
Recurse
right left
Different data values -> False
1 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 11
LHS: x
RHS: _left+x_
+ +
Recurse
right left
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 10
LHS: x
RHS: _left+x_
+ +
Recurse
temp left
Different data values -> False
3 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 9
LHS: x
RHS: _left+x_
+ +
Recurse
left left
Same node and leaf of tree
right x
Different data values -> False
right +
Different number of children -> False
left +
Different number of children -> False
NOW AT PROG_LINE 8
NOW AT PROG_LINE 7
LHS: x
RHS: _left+x_
+ +
Recurse
x left
Different data values -> False
left +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 6
LHS: x
RHS: _left+x_
+ +
Recurse
temp left
Different data values -> False
2 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 5
LHS: x
RHS: _left+x_
+ +
Recurse
x left
Different data values -> False
left +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 4
LHS: x
RHS: _left+x_
1 +
Different number of children -> False
NOW AT PROG_LINE 3
LHS: x
RHS: _left+x_
+ +
Recurse
left left
Same node and leaf of tree
2 x
Different data values -> False
2 +
Different number of children -> False
left +
Different number of children -> False
NOW AT PROG_LINE 2
LHS: x
RHS: _left+x_
x +
Different number of children -> False
NOW AT PROG_LINE 1
LHS: x
RHS: _left+x_
5 +
Different number of children -> False
PRINTING PATTERNANS
ans1 = 18 ans2 = 18
Inserting tokens into relParameters
 
uses(a, "x")

 EVALUATING USES (a "x")
IntersectPairs tk1 Exists tk1 = a
removePairsfrom RELANS
In retrieveTokenEvaluatedAnswers Finding tk = a
Retrieving Token Evaluated Answers with first relationship index = 0
PRINTING ELEMENTS OF RETRIEVED TOKEN: 
18
End retrieving token
in for loop
pair index is 12
in for loop
pair index is 15
in for loop
pair index is 17
in for loop
pair index is 111
in for loop
pair index is 113
in for loop
pair index is 118
in for loop
pair index is 125
in for loop
pair index is 128
in for loop
pair index is 130
in for loop
pair index is 132
in for loop
pair index is 133
in for loop
pair index is 134
in for loop
pair index is 137
end of RemovePairsFromRelAns

---START REMOVE PAIRS METHOD---
Inserting 18
RelIndex of clause with contents being removed: 0
PairIndex: 1
Insert links for tk1 =a
IN INSERT LINKS INSERTING TOKEN = a
a Found in Linkages
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = a p.size = 1
FIRST PARAM = a
it2->ans1 = 18
RETURNING FINAL ANSWERS




Your answer: 18 
Correct answer: 18 
4 - Pattern ::
assign a; 
Select a such that pattern a(_,_"iter +1")

5000
Evaluating query 4 - Pattern ::
Query Invalid




Your answer: 
Correct answer: 
5 - Pattern ::
assign a; 
Select a such that pattern a(_,_"iter+ 1")

5000
Evaluating query 5 - Pattern ::
Query Invalid




Your answer: 
Correct answer: 
6 - Pattern ::
assign a; variable v; 
Select v pattern a(v,_"x+left"_)
radius,radius1,x
5000
Evaluating query 6 - Pattern ::
Ordering Relationships
In orderRelationships
pattern found
After Ordering Relations, r.size = 1
Initializing Variables
 
pattern(v, _"x+left"_)

 EVALUATING PATTERN
IN INSERT LINKS INSERTING TOKEN = a
a Not Found in Linkages and relIndex = 0
IN INSERT LINKS INSERTING TOKEN = v
v Not Found in Linkages and relIndex = 0
PATTERN WITH THE FOLLOWING ARGUMENTS: a v _"x+left"_
NOW AT PROG_LINE -1
NOW AT PROG_LINE -1
NOW AT PROG_LINE -1
NOW AT PROG_LINE 37
LHS: v
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
center left
Different data values -> False
center +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 19
NOW AT PROG_LINE 19
NOW AT PROG_LINE 35
NOW AT PROG_LINE 35
NOW AT PROG_LINE 36
LHS: v
RHS: _x+left_
+ +
Recurse
iter x
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 35
NOW AT PROG_LINE 34
LHS: v
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
quota +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 24
NOW AT PROG_LINE 24
NOW AT PROG_LINE 33
LHS: v
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 26
NOW AT PROG_LINE 26
NOW AT PROG_LINE 27
NOW AT PROG_LINE 27
NOW AT PROG_LINE 32
LHS: v
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
3 left
Different data values -> False
3 +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 29
NOW AT PROG_LINE 29
NOW AT PROG_LINE 31
LHS: v
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
5 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 30
LHS: v
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
quota +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 29
NOW AT PROG_LINE 28
LHS: v
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 27
NOW AT PROG_LINE 26
NOW AT PROG_LINE 25
LHS: v
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
1 left
Different data values -> False
1 +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 24
NOW AT PROG_LINE 22
NOW AT PROG_LINE 22
NOW AT PROG_LINE 23
LHS: v
RHS: _x+left_
+ +
Recurse
iter x
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 22
NOW AT PROG_LINE 21
LHS: v
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
7 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 20
LHS: v
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
left +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
2 +
Different number of children -> False
+ +
Recurse
right x
Different data values -> False
3 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 19
NOW AT PROG_LINE 18
LHS: v
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
5 +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
left x
Different data values -> False
x +
Different number of children -> False
left +
Different number of children -> False
NOW AT PROG_LINE 8
NOW AT PROG_LINE 8
NOW AT PROG_LINE 17
LHS: v
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
6 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 16
LHS: v
RHS: _x+left_
+ +
Recurse
iter x
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 15
LHS: v
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
5 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 14
LHS: v
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
4 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 13
LHS: v
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 12
LHS: v
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
1 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 11
LHS: v
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 10
LHS: v
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
3 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 9
LHS: v
RHS: _x+left_
+ +
Recurse
left x
Different data values -> False
right +
Different number of children -> False
left +
Different number of children -> False
NOW AT PROG_LINE 8
NOW AT PROG_LINE 7
LHS: v
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 6
LHS: v
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
2 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 5
LHS: v
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 4
LHS: v
RHS: _x+left_
1 +
Different number of children -> False
NOW AT PROG_LINE 3
LHS: v
RHS: _x+left_
+ +
Recurse
left x
Different data values -> False
2 +
Different number of children -> False
left +
Different number of children -> False
NOW AT PROG_LINE 2
LHS: v
RHS: _x+left_
x +
Different number of children -> False
NOW AT PROG_LINE 1
LHS: v
RHS: _x+left_
5 +
Different number of children -> False
PRINTING PATTERNANS
ans1 = 34 ans2 = 1
ans1 = 33 ans2 = 1
ans1 = 30 ans2 = 1
ans1 = 7 ans2 = 6
ans1 = 5 ans2 = 5
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = v p.size = 5
FIRST PARAM = a
SECOND PARAM = a
it2->ans2 = 1
it2->ans2 = 1
it2->ans2 = 1
it2->ans2 = 6
it2->ans2 = 5
RETURNING FINAL ANSWERS




Your answer: x radius1 radius 
Correct answer: radius radius1 x 
7 - Pattern ::
assign a; 
Select a pattern a(_,_"x+left"_)
5, 7, 30, 33, 34
5000
Evaluating query 7 - Pattern ::
Ordering Relationships
In orderRelationships
pattern found
After Ordering Relations, r.size = 1
Initializing Variables
 
pattern(_, _"x+left"_)

 EVALUATING PATTERN
IN INSERT LINKS INSERTING TOKEN = a
a Not Found in Linkages and relIndex = 0
PATTERN WITH THE FOLLOWING ARGUMENTS: a _ _"x+left"_
NOW AT PROG_LINE -1
NOW AT PROG_LINE -1
NOW AT PROG_LINE -1
NOW AT PROG_LINE 37
LHS: _
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
center left
Different data values -> False
center +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 19
NOW AT PROG_LINE 19
NOW AT PROG_LINE 35
NOW AT PROG_LINE 35
NOW AT PROG_LINE 36
LHS: _
RHS: _x+left_
+ +
Recurse
iter x
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 35
NOW AT PROG_LINE 34
LHS: _
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
quota +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 24
NOW AT PROG_LINE 24
NOW AT PROG_LINE 33
LHS: _
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 26
NOW AT PROG_LINE 26
NOW AT PROG_LINE 27
NOW AT PROG_LINE 27
NOW AT PROG_LINE 32
LHS: _
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
3 left
Different data values -> False
3 +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 29
NOW AT PROG_LINE 29
NOW AT PROG_LINE 31
LHS: _
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
5 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 30
LHS: _
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
quota +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 29
NOW AT PROG_LINE 28
LHS: _
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 27
NOW AT PROG_LINE 26
NOW AT PROG_LINE 25
LHS: _
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
1 left
Different data values -> False
1 +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 24
NOW AT PROG_LINE 22
NOW AT PROG_LINE 22
NOW AT PROG_LINE 23
LHS: _
RHS: _x+left_
+ +
Recurse
iter x
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 22
NOW AT PROG_LINE 21
LHS: _
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
7 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 20
LHS: _
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
left +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
2 +
Different number of children -> False
+ +
Recurse
right x
Different data values -> False
3 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 19
NOW AT PROG_LINE 18
LHS: _
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
5 +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
left x
Different data values -> False
x +
Different number of children -> False
left +
Different number of children -> False
NOW AT PROG_LINE 8
NOW AT PROG_LINE 8
NOW AT PROG_LINE 17
LHS: _
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
6 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 16
LHS: _
RHS: _x+left_
+ +
Recurse
iter x
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 15
LHS: _
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
5 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 14
LHS: _
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
4 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 13
LHS: _
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 12
LHS: _
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
1 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 11
LHS: _
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 10
LHS: _
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
3 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 9
LHS: _
RHS: _x+left_
+ +
Recurse
left x
Different data values -> False
right +
Different number of children -> False
left +
Different number of children -> False
NOW AT PROG_LINE 8
NOW AT PROG_LINE 7
LHS: _
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 6
LHS: _
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
2 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 5
LHS: _
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 4
LHS: _
RHS: _x+left_
1 +
Different number of children -> False
NOW AT PROG_LINE 3
LHS: _
RHS: _x+left_
+ +
Recurse
left x
Different data values -> False
2 +
Different number of children -> False
left +
Different number of children -> False
NOW AT PROG_LINE 2
LHS: _
RHS: _x+left_
x +
Different number of children -> False
NOW AT PROG_LINE 1
LHS: _
RHS: _x+left_
5 +
Different number of children -> False
PRINTING PATTERNANS
ans1 = 34 ans2 = 34
ans1 = 33 ans2 = 33
ans1 = 30 ans2 = 30
ans1 = 7 ans2 = 7
ans1 = 5 ans2 = 5
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = a p.size = 5
FIRST PARAM = a
it2->ans1 = 34
it2->ans1 = 33
it2->ans1 = 30
it2->ans1 = 7
it2->ans1 = 5
RETURNING FINAL ANSWERS




Your answer: 34 33 30 7 5 
Correct answer: 5 7 30 33 34 
8 - Uses ::
while w; stmt s; 
Select w such that Uses (s,"wrong")

5000
Evaluating query 8 - Uses ::
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(s, "wrong")

 EVALUATING USES (s "wrong")
In intersect Pairs: both do not exist
Insert links for tk1 =s
IN INSERT LINKS INSERTING TOKEN = s
s Not Found in Linkages and relIndex = 0
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
9 - Uses ::
stmt s; 
Select s such that Uses (s,"wrong")

5000
Evaluating query 9 - Uses ::
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(s, "wrong")

 EVALUATING USES (s "wrong")
In intersect Pairs: both do not exist
Insert links for tk1 =s
IN INSERT LINKS INSERTING TOKEN = s
s Not Found in Linkages and relIndex = 0
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
token in selectedSyn = s p.size = 0
FIRST PARAM = s
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
10 - Pattern ::
assign a; variable v; 
Select pattern a(v,_)

5000
Evaluating query 10 - Pattern ::
Query Invalid




Your answer: 
Correct answer: 
11 - FollowsStar, Pattern ::
assign a; 
Select a such that Follows* (25,a) pattern a("x",_"x+left"_)
33
5000
Evaluating query 11 - FollowsStar, Pattern ::
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
pattern found
After Ordering Relations, r.size = 2
Initializing Variables
 
pattern("x", _"x+left"_)

 EVALUATING PATTERN
IN INSERT LINKS INSERTING TOKEN = a
a Not Found in Linkages and relIndex = 0
PATTERN WITH THE FOLLOWING ARGUMENTS: a "x" _"x+left"_
NOW AT PROG_LINE -1
NOW AT PROG_LINE -1
NOW AT PROG_LINE -1
NOW AT PROG_LINE 37
LHS: x
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
center left
Different data values -> False
center +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 19
NOW AT PROG_LINE 19
NOW AT PROG_LINE 35
NOW AT PROG_LINE 35
NOW AT PROG_LINE 36
LHS: x
RHS: _x+left_
+ +
Recurse
iter x
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 35
NOW AT PROG_LINE 34
LHS: x
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
quota +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 24
NOW AT PROG_LINE 24
NOW AT PROG_LINE 33
LHS: x
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 26
NOW AT PROG_LINE 26
NOW AT PROG_LINE 27
NOW AT PROG_LINE 27
NOW AT PROG_LINE 32
LHS: x
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
3 left
Different data values -> False
3 +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 29
NOW AT PROG_LINE 29
NOW AT PROG_LINE 31
LHS: x
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
5 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 30
LHS: x
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
quota +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 29
NOW AT PROG_LINE 28
LHS: x
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 27
NOW AT PROG_LINE 26
NOW AT PROG_LINE 25
LHS: x
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
1 left
Different data values -> False
1 +
Different number of children -> False
x +
Different number of children -> False
NOW AT PROG_LINE 24
NOW AT PROG_LINE 22
NOW AT PROG_LINE 22
NOW AT PROG_LINE 23
LHS: x
RHS: _x+left_
+ +
Recurse
iter x
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 22
NOW AT PROG_LINE 21
LHS: x
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
7 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 20
LHS: x
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
left +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
2 +
Different number of children -> False
+ +
Recurse
right x
Different data values -> False
3 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 19
NOW AT PROG_LINE 18
LHS: x
RHS: _x+left_
+ +
Recurse
+ x
Different number of children -> False
5 +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
radius +
Different number of children -> False
+ +
Recurse
+ x
Different number of children -> False
right +
Different number of children -> False
+ +
Recurse
left x
Different data values -> False
x +
Different number of children -> False
left +
Different number of children -> False
NOW AT PROG_LINE 8
NOW AT PROG_LINE 8
NOW AT PROG_LINE 17
LHS: x
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
6 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 16
LHS: x
RHS: _x+left_
+ +
Recurse
iter x
Different data values -> False
1 +
Different number of children -> False
iter +
Different number of children -> False
NOW AT PROG_LINE 15
LHS: x
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
5 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 14
LHS: x
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
4 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 13
LHS: x
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 12
LHS: x
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
1 +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 11
LHS: x
RHS: _x+left_
+ +
Recurse
right x
Different data values -> False
x +
Different number of children -> False
right +
Different number of children -> False
NOW AT PROG_LINE 10
LHS: x
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
3 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 9
LHS: x
RHS: _x+left_
+ +
Recurse
left x
Different data values -> False
right +
Different number of children -> False
left +
Different number of children -> False
NOW AT PROG_LINE 8
NOW AT PROG_LINE 7
LHS: x
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 6
LHS: x
RHS: _x+left_
+ +
Recurse
temp x
Different data values -> False
2 +
Different number of children -> False
temp +
Different number of children -> False
NOW AT PROG_LINE 5
LHS: x
RHS: _x+left_
+ +
Recurse
x x
Same node and leaf of tree
left left
Same node and leaf of tree
NOW AT PROG_LINE 4
LHS: x
RHS: _x+left_
1 +
Different number of children -> False
NOW AT PROG_LINE 3
LHS: x
RHS: _x+left_
+ +
Recurse
left x
Different data values -> False
2 +
Different number of children -> False
left +
Different number of children -> False
NOW AT PROG_LINE 2
LHS: x
RHS: _x+left_
x +
Different number of children -> False
NOW AT PROG_LINE 1
LHS: x
RHS: _x+left_
5 +
Different number of children -> False
PRINTING PATTERNANS
ans1 = 34 ans2 = 34
ans1 = 33 ans2 = 33
ans1 = 30 ans2 = 30
Inserting tokens into relParameters
 
follows*(25, a)

 EVALUATING FOLLOWS* (25 a)
Handling Follows*(stmtnum, type)
Calling getFollows(type, stmtnum)
Calling getFollows(type, stmtnum)
Calling getFollows(type, stmtnum)
IntersectPairs tk2 Exists tk2 = a
removePairsfrom RELANS
In retrieveTokenEvaluatedAnswers Finding tk = a
Retrieving Token Evaluated Answers with first relationship index = 0
PRINTING ELEMENTS OF RETRIEVED TOKEN: 
30
33
34
End retrieving token
in for loop
in else
end of RemovePairsFromRelAns

---START REMOVE PAIRS METHOD---
Inserting 33
RelIndex of clause with contents being removed: 0
PairIndex: 1
Erasing element 34
Erasing element 30
Insert links for tk2 = a
IN INSERT LINKS INSERTING TOKEN = a
a Found in Linkages
Inserting into RelAns RelIndex = 1
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = a p.size = 1
FIRST PARAM = a
it2->ans1 = 33
RETURNING FINAL ANSWERS




Your answer: 33 
Correct answer: 33 
12 - Uses, Pattern ::
assign a; variable v; 
Select v such that Uses(a,v) pattern a(v,_)
temp, right, iter, x
5000
Evaluating query 12 - Uses, Pattern ::
Ordering Relationships
In orderRelationships
pattern found
After Ordering Relations, r.size = 2
Initializing Variables
 
uses(a, v)

 EVALUATING USES (a v)
In intersect Pairs: both do not exist
Insert links for tk1 =a
IN INSERT LINKS INSERTING TOKEN = a
a Not Found in Linkages and relIndex = 0
Insert links for tk2 = v
IN INSERT LINKS INSERTING TOKEN = v
v Not Found in Linkages and relIndex = 0
Inserting tokens into relParameters
 
pattern(v, _)

 EVALUATING PATTERN
IN INSERT LINKS INSERTING TOKEN = a
a Found in Linkages
IN INSERT LINKS INSERTING TOKEN = v
v Found in Linkages
PATTERN WITH THE FOLLOWING ARGUMENTS: a v _
NOW AT PROG_LINE -1
NOW AT PROG_LINE -1
NOW AT PROG_LINE -1
NOW AT PROG_LINE 37
LHS: v
RHS: _
NOW AT PROG_LINE 19
NOW AT PROG_LINE 19
NOW AT PROG_LINE 35
NOW AT PROG_LINE 35
NOW AT PROG_LINE 36
LHS: v
RHS: _
NOW AT PROG_LINE 35
NOW AT PROG_LINE 34
LHS: v
RHS: _
NOW AT PROG_LINE 24
NOW AT PROG_LINE 24
NOW AT PROG_LINE 33
LHS: v
RHS: _
NOW AT PROG_LINE 26
NOW AT PROG_LINE 26
NOW AT PROG_LINE 27
NOW AT PROG_LINE 27
NOW AT PROG_LINE 32
LHS: v
RHS: _
NOW AT PROG_LINE 29
NOW AT PROG_LINE 29
NOW AT PROG_LINE 31
LHS: v
RHS: _
NOW AT PROG_LINE 30
LHS: v
RHS: _
NOW AT PROG_LINE 29
NOW AT PROG_LINE 28
LHS: v
RHS: _
NOW AT PROG_LINE 27
NOW AT PROG_LINE 26
NOW AT PROG_LINE 25
LHS: v
RHS: _
NOW AT PROG_LINE 24
NOW AT PROG_LINE 22
NOW AT PROG_LINE 22
NOW AT PROG_LINE 23
LHS: v
RHS: _
NOW AT PROG_LINE 22
NOW AT PROG_LINE 21
LHS: v
RHS: _
NOW AT PROG_LINE 20
LHS: v
RHS: _
NOW AT PROG_LINE 19
NOW AT PROG_LINE 18
LHS: v
RHS: _
NOW AT PROG_LINE 8
NOW AT PROG_LINE 8
NOW AT PROG_LINE 17
LHS: v
RHS: _
NOW AT PROG_LINE 16
LHS: v
RHS: _
NOW AT PROG_LINE 15
LHS: v
RHS: _
NOW AT PROG_LINE 14
LHS: v
RHS: _
NOW AT PROG_LINE 13
LHS: v
RHS: _
NOW AT PROG_LINE 12
LHS: v
RHS: _
NOW AT PROG_LINE 11
LHS: v
RHS: _
NOW AT PROG_LINE 10
LHS: v
RHS: _
NOW AT PROG_LINE 9
LHS: v
RHS: _
NOW AT PROG_LINE 8
NOW AT PROG_LINE 7
LHS: v
RHS: _
NOW AT PROG_LINE 6
LHS: v
RHS: _
NOW AT PROG_LINE 5
LHS: v
RHS: _
NOW AT PROG_LINE 4
LHS: v
RHS: _
NOW AT PROG_LINE 3
LHS: v
RHS: _
NOW AT PROG_LINE 2
LHS: v
RHS: _
NOW AT PROG_LINE 1
LHS: v
RHS: _
PRINTING PATTERNANS
ans1 = 37 ans2 = 1
ans1 = 36 ans2 = 8
ans1 = 34 ans2 = 1
ans1 = 33 ans2 = 1
ans1 = 32 ans2 = 3
ans1 = 31 ans2 = 2
ans1 = 30 ans2 = 1
ans1 = 28 ans2 = 2
ans1 = 25 ans2 = 3
ans1 = 23 ans2 = 8
ans1 = 21 ans2 = 4
ans1 = 20 ans2 = 1
ans1 = 18 ans2 = 1
ans1 = 17 ans2 = 4
ans1 = 16 ans2 = 8
ans1 = 15 ans2 = 4
ans1 = 14 ans2 = 4
ans1 = 13 ans2 = 2
ans1 = 12 ans2 = 8
ans1 = 11 ans2 = 3
ans1 = 10 ans2 = 4
ans1 = 9 ans2 = 7
ans1 = 7 ans2 = 6
ans1 = 6 ans2 = 4
ans1 = 5 ans2 = 5
ans1 = 4 ans2 = 4
ans1 = 3 ans2 = 3
ans1 = 2 ans2 = 2
ans1 = 1 ans2 = 1
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = v p.size = 48
FIRST PARAM = a
SECOND PARAM = v
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 4
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 1
it2->ans2 = 3
it2->ans2 = 3
it2->ans2 = 1
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 4
it2->ans2 = 8
it2->ans2 = 4
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 5
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 8
it2->ans2 = 1
it2->ans2 = 1
it2->ans2 = 3
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 5
it2->ans2 = 7
it2->ans2 = 3
it2->ans2 = 1
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 5
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 1
it2->ans2 = 9
RETURNING FINAL ANSWERS




Your answer: temp right iter x 
Correct answer: temp right iter x 
End of evaluating Query File.
AutoTester Completed !
