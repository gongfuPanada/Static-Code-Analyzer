Parameters : S5-basicTests.txt Q5-basicTests.txt R5-basicTests.xml
Beginning to parse Simple Program.
Begin CodeParser
End CodeParser
Begin DesignExtractor
DE: Extracted Relationships
Building CFG
Extracting Sibling
End DesignExtractor
End of parsing Simple Program.
iterationX
Beginning to evaluate Query File.
New Category :  All Queries
1 - Follows :: 
stmt s;
Select s such that Follows (_, _)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 1 - Follows :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows(_, _)

 EVALUATING FOLLOWS (_ _)
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
2 - Follows :: 
stmt s;
Select s such that Follows (s, _)
1,2,3,4,5,7,8,9,10,16,17,18,19,21,22,24,26,32,35,37,38,39,40,43,44
5000
Evaluating query 2 - Follows :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows(s, _)

 EVALUATING FOLLOWS (s _)
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 25
FIRST PARAM = s
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 5
it2->ans1 = 7
it2->ans1 = 8
it2->ans1 = 9
it2->ans1 = 10
it2->ans1 = 16
it2->ans1 = 17
it2->ans1 = 18
it2->ans1 = 19
it2->ans1 = 21
it2->ans1 = 22
it2->ans1 = 24
it2->ans1 = 26
it2->ans1 = 32
it2->ans1 = 35
it2->ans1 = 37
it2->ans1 = 38
it2->ans1 = 39
it2->ans1 = 40
it2->ans1 = 43
it2->ans1 = 44
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 7 8 9 10 16 17 18 19 21 22 24 26 32 35 37 38 39 40 43 44 
Correct answer: 1 2 3 4 5 7 8 9 10 16 17 18 19 21 22 24 26 32 35 37 38 39 40 43 44 
3 - Follows :: 
stmt s;
Select s such that Follows (_, s)
2,3,4,5,6,8,10,11,12,17,18,20,22,23,25,27,33,34,36,38,40,41,42,44,45
5000
Evaluating query 3 - Follows :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows(_, s)

 EVALUATING FOLLOWS (_ s)
Second token is alpha and it does not exist in linkages
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 25
FIRST PARAM = _
SECOND PARAM = s
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 8
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 12
it2->ans2 = 17
it2->ans2 = 18
it2->ans2 = 20
it2->ans2 = 22
it2->ans2 = 23
it2->ans2 = 25
it2->ans2 = 27
it2->ans2 = 33
it2->ans2 = 34
it2->ans2 = 36
it2->ans2 = 38
it2->ans2 = 40
it2->ans2 = 41
it2->ans2 = 42
it2->ans2 = 44
it2->ans2 = 45
RETURNING FINAL ANSWERS




Your answer: 2 3 4 5 6 8 10 11 12 17 18 20 22 23 25 27 33 34 36 38 40 41 42 44 45 
Correct answer: 2 3 4 5 6 8 10 11 12 17 18 20 22 23 25 27 33 34 36 38 40 41 42 44 45 
4 - Follows :: 
stmt s;
Select s such that Follows (_, 1)
none
5000
Evaluating query 4 - Follows :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows(_, 1)

 EVALUATING FOLLOWS (_ 1)
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
5 - Follows :: 
stmt s;
Select s such that Follows (3, s)
4
5000
Evaluating query 5 - Follows :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows(3, s)

 EVALUATING FOLLOWS (3 s)
Second token is alpha and it does not exist in linkages
First token is digit
Answer is = 4
followsAns.size = 1
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 1
FIRST PARAM = 3
SECOND PARAM = s
it2->ans2 = 4
RETURNING FINAL ANSWERS




Your answer: 4 
Correct answer: 4 
6 - Follows :: 
stmt s, s1;
Select s such that Follows (s, s1)
1,2,3,4,5,7,8,9,10,16,17,18,19,21,22,24,26,32,35,37,38,39,40,43,44
5000
Evaluating query 6 - Follows :: 
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
follows(s, s1)

 EVALUATING FOLLOWS (s s1)
Both tokens are alpha and do not exist in linkages
trying is follows1
first.at(i) = 1second.at(i) = 2
first.at(i) = 2second.at(i) = 3
first.at(i) = 3second.at(i) = 4
first.at(i) = 4second.at(i) = 5
first.at(i) = 5second.at(i) = 6
first.at(i) = 7second.at(i) = 8
first.at(i) = 8second.at(i) = 12
first.at(i) = 9second.at(i) = 10
first.at(i) = 10second.at(i) = 11
first.at(i) = 16second.at(i) = 17
first.at(i) = 17second.at(i) = 18
first.at(i) = 18second.at(i) = 34
first.at(i) = 19second.at(i) = 20
first.at(i) = 21second.at(i) = 22
first.at(i) = 22second.at(i) = 23
first.at(i) = 24second.at(i) = 25
first.at(i) = 26second.at(i) = 27
first.at(i) = 32second.at(i) = 33
first.at(i) = 35second.at(i) = 36
first.at(i) = 37second.at(i) = 38
first.at(i) = 38second.at(i) = 42
first.at(i) = 39second.at(i) = 40
first.at(i) = 40second.at(i) = 41
first.at(i) = 43second.at(i) = 44
first.at(i) = 44second.at(i) = 45
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
--INSERTING s1--
s1 Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 25
FIRST PARAM = s
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 5
it2->ans1 = 7
it2->ans1 = 8
it2->ans1 = 9
it2->ans1 = 10
it2->ans1 = 16
it2->ans1 = 17
it2->ans1 = 18
it2->ans1 = 19
it2->ans1 = 21
it2->ans1 = 22
it2->ans1 = 24
it2->ans1 = 26
it2->ans1 = 32
it2->ans1 = 35
it2->ans1 = 37
it2->ans1 = 38
it2->ans1 = 39
it2->ans1 = 40
it2->ans1 = 43
it2->ans1 = 44
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 7 8 9 10 16 17 18 19 21 22 24 26 32 35 37 38 39 40 43 44 
Correct answer: 1 2 3 4 5 7 8 9 10 16 17 18 19 21 22 24 26 32 35 37 38 39 40 43 44 
7 - Follows :: 
stmt s;
Select s such that Follows (3, 4)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 7 - Follows :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows(3, 4)

 EVALUATING FOLLOWS (3 4)
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
8 - Follows :: 
stmt s;
Select s such that Follows (3, _)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 8 - Follows :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows(3, _)

 EVALUATING FOLLOWS (3 _)
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
9 - Follows :: 
stmt s;
Select s such that Follows (_, 3)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 9 - Follows :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows(_, 3)

 EVALUATING FOLLOWS (_ 3)
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
10 - FollowsStar :: 
stmt s;
Select s such that Follows* (_, _)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 10 - FollowsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(_, _)

 EVALUATING FOLLOWS* (_ _)
In intersect Pairs: both do not exist
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
11 - FollowsStar :: 
stmt s;
Select s such that Follows* (s, _)
1,2,3,4,5,7,8,9,10,16,17,18,19,21,22,24,26,32,35,37,38,39,40,43,44
5000
Evaluating query 11 - FollowsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(s, _)

 EVALUATING FOLLOWS* (s _)
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 44
FIRST PARAM = s
it2->ans1 = 44
it2->ans1 = 43
it2->ans1 = 43
it2->ans1 = 40
it2->ans1 = 39
it2->ans1 = 39
it2->ans1 = 38
it2->ans1 = 37
it2->ans1 = 37
it2->ans1 = 35
it2->ans1 = 32
it2->ans1 = 26
it2->ans1 = 24
it2->ans1 = 22
it2->ans1 = 21
it2->ans1 = 21
it2->ans1 = 19
it2->ans1 = 18
it2->ans1 = 17
it2->ans1 = 17
it2->ans1 = 16
it2->ans1 = 16
it2->ans1 = 16
it2->ans1 = 10
it2->ans1 = 9
it2->ans1 = 9
it2->ans1 = 8
it2->ans1 = 7
it2->ans1 = 7
it2->ans1 = 5
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
RETURNING FINAL ANSWERS




Your answer: 44 43 40 39 38 37 35 32 26 24 22 21 19 18 17 16 10 9 8 7 5 4 3 2 1 
Correct answer: 1 2 3 4 5 7 8 9 10 16 17 18 19 21 22 24 26 32 35 37 38 39 40 43 44 
12 - FollowsStar :: 
stmt s;
Select s such that Follows* (_, s)
2,3,4,5,6,8,10,11,12,17,18,20,22,23,25,27,33,34,36,38,40,41,42,44,45
5000
Evaluating query 12 - FollowsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(_, s)

 EVALUATING FOLLOWS* (_ s)
In intersect Pairs: both do not exist
Insert links for tk2 = s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 44
FIRST PARAM = _
SECOND PARAM = s
it2->ans2 = 45
it2->ans2 = 45
it2->ans2 = 44
it2->ans2 = 41
it2->ans2 = 41
it2->ans2 = 40
it2->ans2 = 42
it2->ans2 = 42
it2->ans2 = 38
it2->ans2 = 36
it2->ans2 = 33
it2->ans2 = 27
it2->ans2 = 25
it2->ans2 = 23
it2->ans2 = 23
it2->ans2 = 22
it2->ans2 = 20
it2->ans2 = 34
it2->ans2 = 34
it2->ans2 = 18
it2->ans2 = 34
it2->ans2 = 18
it2->ans2 = 17
it2->ans2 = 11
it2->ans2 = 11
it2->ans2 = 10
it2->ans2 = 12
it2->ans2 = 12
it2->ans2 = 8
it2->ans2 = 6
it2->ans2 = 6
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 5
it2->ans2 = 4
it2->ans2 = 6
it2->ans2 = 5
it2->ans2 = 4
it2->ans2 = 3
it2->ans2 = 6
it2->ans2 = 5
it2->ans2 = 4
it2->ans2 = 3
it2->ans2 = 2
RETURNING FINAL ANSWERS




Your answer: 45 44 41 40 42 38 36 33 27 25 23 22 20 34 18 17 11 10 12 8 6 5 4 3 2 
Correct answer: 2 3 4 5 6 8 10 11 12 17 18 20 22 23 25 27 33 34 36 38 40 41 42 44 45 
13 - FollowsStar :: 
stmt s;
Select s such that Follows* (s, 3)
1,2
5000
Evaluating query 13 - FollowsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(s, 3)

 EVALUATING FOLLOWS* (s 3)
Handling Follows*(type, stmtnum) with tk2 = 3
Calling getFollowedBy(type, stmtnum)
Evaluated StmtNumber = 2
Inserting StmtNumber 2 into the answer set
Calling getFollowedBy(type, stmtnum)
Evaluated StmtNumber = 1
Inserting StmtNumber 1 into the answer set
Calling getFollowedBy(type, stmtnum)
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 2
FIRST PARAM = s
it2->ans1 = 1
it2->ans1 = 2
RETURNING FINAL ANSWERS




Your answer: 1 2 
Correct answer: 1 2 
14 - FollowsStar :: 
stmt s;
Select s such that Follows* (3, s)
4,5,6
5000
Evaluating query 14 - FollowsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(3, s)

 EVALUATING FOLLOWS* (3 s)
Handling Follows*(stmtnum, type)
Calling getFollows(type, stmtnum)
Calling getFollows(type, stmtnum)
Calling getFollows(type, stmtnum)
Calling getFollows(type, stmtnum)
In intersect Pairs: both do not exist
Insert links for tk2 = s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 3
FIRST PARAM = 3
SECOND PARAM = s
it2->ans2 = 6
it2->ans2 = 5
it2->ans2 = 4
RETURNING FINAL ANSWERS




Your answer: 6 5 4 
Correct answer: 4 5 6 
15 - FollowsStar :: 
stmt s, s1;
Select s such that Follows* (s, s1)
1,2,3,4,5,7,8,9,10,16,17,18,19,21,22,24,26,32,35,37,38,39,40,43,44
5000
Evaluating query 15 - FollowsStar :: 
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(s, s1)

 EVALUATING FOLLOWS* (s s1)
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Insert links for tk2 = s1
--INSERTING s1--
s1 Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 44
FIRST PARAM = s
it2->ans1 = 44
it2->ans1 = 43
it2->ans1 = 43
it2->ans1 = 40
it2->ans1 = 39
it2->ans1 = 39
it2->ans1 = 38
it2->ans1 = 37
it2->ans1 = 37
it2->ans1 = 35
it2->ans1 = 32
it2->ans1 = 26
it2->ans1 = 24
it2->ans1 = 22
it2->ans1 = 21
it2->ans1 = 21
it2->ans1 = 19
it2->ans1 = 18
it2->ans1 = 17
it2->ans1 = 17
it2->ans1 = 16
it2->ans1 = 16
it2->ans1 = 16
it2->ans1 = 10
it2->ans1 = 9
it2->ans1 = 9
it2->ans1 = 8
it2->ans1 = 7
it2->ans1 = 7
it2->ans1 = 5
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
RETURNING FINAL ANSWERS




Your answer: 44 43 40 39 38 37 35 32 26 24 22 21 19 18 17 16 10 9 8 7 5 4 3 2 1 
Correct answer: 1 2 3 4 5 7 8 9 10 16 17 18 19 21 22 24 26 32 35 37 38 39 40 43 44 
16 - FollowsStar :: 
stmt s;
Select s such that Follows* (3, 6)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 16 - FollowsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(3, 6)

 EVALUATING FOLLOWS* (3 6)
STMTNUM is 4
STMTNUM is 5
STMTNUM is 6
In intersect Pairs: both do not exist
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
17 - FollowsStar :: 
stmt s;
Select s such that Follows* (3, _)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 17 - FollowsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(3, _)

 EVALUATING FOLLOWS* (3 _)
STMTNUM is 4
In intersect Pairs: both do not exist
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
18 - FollowsStar :: 
stmt s;
Select s such that Follows* (_, 3)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 18 - FollowsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
follows*(_, 3)

 EVALUATING FOLLOWS* (_ 3)
In intersect Pairs: both do not exist
Inserting into RelAns RelIndex = 0
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
19 - Parent :: 
stmt s;
Select s such that Parent (_, _)
1,10,11,12,13,14,15,16,17,18,19,2,20,21,22,23,24,25,26,27,28,29,3,30,31,32,33,34,35,36,37,38,39,4,40,41,42,43,44,45,46,5,6,7,8,9
5000
Evaluating query 19 - Parent :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent(_, _)

 EVALUATING PARENT (_ _)
tk1 = _ tk2 = _
parent found to be not empty
before intersect pairs
In intersect Pairs: both do not exist
after intersect pairs
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 10 11 12 13 14 15 16 17 18 19 2 20 21 22 23 24 25 26 27 28 29 3 30 31 32 33 34 35 36 37 38 39 4 40 41 42 43 44 45 46 5 6 7 8 9 
20 - Parent :: 
stmt s;
Select s such that Parent (s, _)
6,8,13,18,20,23,25,27,29,31,36,38,42
5000
Evaluating query 20 - Parent :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent(s, _)

 EVALUATING PARENT (s _)
tk1 = s tk2 = _
pushing into parent pair1 = 6pair2 = 7
pushing into parent pair1 = 8pair2 = 9
pushing into parent pair1 = 8pair2 = 10
pushing into parent pair1 = 13pair2 = 14
pushing into parent pair1 = 13pair2 = 15
pushing into parent pair1 = 18pair2 = 19
pushing into parent pair1 = 20pair2 = 21
pushing into parent pair1 = 20pair2 = 22
pushing into parent pair1 = 23pair2 = 24
pushing into parent pair1 = 25pair2 = 26
pushing into parent pair1 = 27pair2 = 28
pushing into parent pair1 = 29pair2 = 30
pushing into parent pair1 = 31pair2 = 32
pushing into parent pair1 = 36pair2 = 37
pushing into parent pair1 = 38pair2 = 39
pushing into parent pair1 = 38pair2 = 40
pushing into parent pair1 = 38pair2 = 41
pushing into parent pair1 = 42pair2 = 43
pushing into parent pair1 = 42pair2 = 44
pushing into parent pair1 = 42pair2 = 45
before intersect pairs
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
after intersect pairs
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 20
FIRST PARAM = s
it2->ans1 = 6
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 13
it2->ans1 = 13
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 27
it2->ans1 = 29
it2->ans1 = 31
it2->ans1 = 36
it2->ans1 = 38
it2->ans1 = 38
it2->ans1 = 38
it2->ans1 = 42
it2->ans1 = 42
it2->ans1 = 42
RETURNING FINAL ANSWERS




Your answer: 6 8 13 18 20 23 25 27 29 31 36 38 42 
Correct answer: 6 8 13 18 20 23 25 27 29 31 36 38 42 
21 - Parent :: 
stmt s;
Select s such that Parent (_, s)
7,8,9,10,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,42,43,44,45
5000
Evaluating query 21 - Parent :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent(_, s)

 EVALUATING PARENT (_ s)
tk1 = _ tk2 = s
pushing into parent pair1 = 6pair2 = 7
pushing into parent pair1 = 6pair2 = 8
pushing into parent pair1 = 6pair2 = 12
pushing into parent pair1 = 6pair2 = 13
pushing into parent pair1 = 8pair2 = 9
pushing into parent pair1 = 8pair2 = 10
pushing into parent pair1 = 8pair2 = 11
pushing into parent pair1 = 13pair2 = 14
pushing into parent pair1 = 13pair2 = 15
pushing into parent pair1 = 18pair2 = 19
pushing into parent pair1 = 18pair2 = 20
pushing into parent pair1 = 20pair2 = 21
pushing into parent pair1 = 20pair2 = 22
pushing into parent pair1 = 20pair2 = 23
pushing into parent pair1 = 23pair2 = 24
pushing into parent pair1 = 23pair2 = 25
pushing into parent pair1 = 25pair2 = 26
pushing into parent pair1 = 25pair2 = 27
pushing into parent pair1 = 25pair2 = 29
pushing into parent pair1 = 27pair2 = 28
pushing into parent pair1 = 29pair2 = 30
pushing into parent pair1 = 29pair2 = 31
pushing into parent pair1 = 31pair2 = 32
pushing into parent pair1 = 31pair2 = 33
pushing into parent pair1 = 36pair2 = 37
pushing into parent pair1 = 36pair2 = 38
pushing into parent pair1 = 36pair2 = 42
pushing into parent pair1 = 38pair2 = 39
pushing into parent pair1 = 38pair2 = 40
pushing into parent pair1 = 38pair2 = 41
pushing into parent pair1 = 42pair2 = 43
pushing into parent pair1 = 42pair2 = 44
pushing into parent pair1 = 42pair2 = 45
before intersect pairs
In intersect Pairs: both do not exist
Insert links for tk2 = s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
after intersect pairs
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 33
FIRST PARAM = _
SECOND PARAM = s
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 12
it2->ans2 = 13
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 14
it2->ans2 = 15
it2->ans2 = 19
it2->ans2 = 20
it2->ans2 = 21
it2->ans2 = 22
it2->ans2 = 23
it2->ans2 = 24
it2->ans2 = 25
it2->ans2 = 26
it2->ans2 = 27
it2->ans2 = 29
it2->ans2 = 28
it2->ans2 = 30
it2->ans2 = 31
it2->ans2 = 32
it2->ans2 = 33
it2->ans2 = 37
it2->ans2 = 38
it2->ans2 = 42
it2->ans2 = 39
it2->ans2 = 40
it2->ans2 = 41
it2->ans2 = 43
it2->ans2 = 44
it2->ans2 = 45
RETURNING FINAL ANSWERS




Your answer: 7 8 12 13 9 10 11 14 15 19 20 21 22 23 24 25 26 27 29 28 30 31 32 33 37 38 42 39 40 41 43 44 45 
Correct answer: 7 8 9 10 11 12 13 14 15 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 37 38 39 40 41 42 43 44 45 
22 - Parent :: 
stmt s;
Select s such that Parent (s, 10)
8
5000
Evaluating query 22 - Parent :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent(s, 10)

 EVALUATING PARENT (s 10)
tk1 = s tk2 = 10
Calling getParent(TYPE, STMTNUM)
before intersect pairs
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
after intersect pairs
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 1
FIRST PARAM = s
it2->ans1 = 8
RETURNING FINAL ANSWERS




Your answer: 8 
Correct answer: 8 
23 - Parent :: 
stmt s;
Select s such that Parent (9, s)
none
5000
Evaluating query 23 - Parent :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent(9, s)

 EVALUATING PARENT (9 s)
tk1 = 9 tk2 = s
Parent(STMTNUM, TYPE)
before intersect pairs
In intersect Pairs: both do not exist
Insert links for tk2 = s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
after intersect pairs
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
token in selectedSyn = s p.size = 0
FIRST PARAM = 9
SECOND PARAM = s
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
24 - Parent :: 
stmt s, s1;
Select s such that Parent (s, s1)
6,8,13,18,20,23,25,27,29,31,36,38,42
5000
Evaluating query 24 - Parent :: 
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
parent(s, s1)

 EVALUATING PARENT (s s1)
tk1 = s tk2 = s1
pushing into parent pair1 = 6pair2 = 7
pushing into parent pair1 = 6pair2 = 8
pushing into parent pair1 = 6pair2 = 12
pushing into parent pair1 = 6pair2 = 13
pushing into parent pair1 = 8pair2 = 9
pushing into parent pair1 = 8pair2 = 10
pushing into parent pair1 = 8pair2 = 11
pushing into parent pair1 = 13pair2 = 14
pushing into parent pair1 = 13pair2 = 15
pushing into parent pair1 = 18pair2 = 19
pushing into parent pair1 = 18pair2 = 20
pushing into parent pair1 = 20pair2 = 21
pushing into parent pair1 = 20pair2 = 22
pushing into parent pair1 = 20pair2 = 23
pushing into parent pair1 = 23pair2 = 24
pushing into parent pair1 = 23pair2 = 25
pushing into parent pair1 = 25pair2 = 26
pushing into parent pair1 = 25pair2 = 27
pushing into parent pair1 = 25pair2 = 29
pushing into parent pair1 = 27pair2 = 28
pushing into parent pair1 = 29pair2 = 30
pushing into parent pair1 = 29pair2 = 31
pushing into parent pair1 = 31pair2 = 32
pushing into parent pair1 = 31pair2 = 33
pushing into parent pair1 = 36pair2 = 37
pushing into parent pair1 = 36pair2 = 38
pushing into parent pair1 = 36pair2 = 42
pushing into parent pair1 = 38pair2 = 39
pushing into parent pair1 = 38pair2 = 40
pushing into parent pair1 = 38pair2 = 41
pushing into parent pair1 = 42pair2 = 43
pushing into parent pair1 = 42pair2 = 44
pushing into parent pair1 = 42pair2 = 45
before intersect pairs
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Insert links for tk2 = s1
--INSERTING s1--
s1 Not Found in Linkages and relIndex = 0
--END OF INSERT--
after intersect pairs
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 33
FIRST PARAM = s
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 13
it2->ans1 = 13
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 27
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 38
it2->ans1 = 38
it2->ans1 = 38
it2->ans1 = 42
it2->ans1 = 42
it2->ans1 = 42
RETURNING FINAL ANSWERS




Your answer: 6 8 13 18 20 23 25 27 29 31 36 38 42 
Correct answer: 6 8 13 18 20 23 25 27 29 31 36 38 42 
25 - Parent :: 
stmt s;
Select s such that Parent (7, 8)
none
5000
Evaluating query 25 - Parent :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent(7, 8)

 EVALUATING PARENT (7 8)
tk1 = 7 tk2 = 8
isfalse78
before intersect pairs
In intersect Pairs: both do not exist
after intersect pairs
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
26 - Parent :: 
stmt s;
Select s such that Parent (7, _)
none
5000
Evaluating query 26 - Parent :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent(7, _)

 EVALUATING PARENT (7 _)
tk1 = 7 tk2 = _
Parent(STMTNUM, TYPE)
before intersect pairs
In intersect Pairs: both do not exist
after intersect pairs
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
27 - Parent :: 
stmt s;
Select s such that Parent (_, 9)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 27 - Parent :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent(_, 9)

 EVALUATING PARENT (_ 9)
tk1 = _ tk2 = 9
Calling getParent(TYPE, STMTNUM)
before intersect pairs
In intersect Pairs: both do not exist
after intersect pairs
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
28 - ParentStar :: 
stmt s;
Select s such that Parent* (_, _)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 28 - ParentStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(_, _)

 EVALUATING PARENT* (_ _)
Initialzing all Parent* variables
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
29 - ParentStar :: 
stmt s;
Select s such that Parent* (s, _)
6,8,13,18,20,23,25,27,29,31,36,38,42
5000
Evaluating query 29 - ParentStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(s, _)

 EVALUATING PARENT* (s _)
Initialzing all Parent* variables
If both tokens are alpha or one of them is a wildcard
Token2 does not Exist in Linkages
sb is Empty: 0
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 82
FIRST PARAM = s
it2->ans1 = 36
it2->ans1 = 42
it2->ans1 = 36
it2->ans1 = 42
it2->ans1 = 36
it2->ans1 = 42
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 38
it2->ans1 = 36
it2->ans1 = 38
it2->ans1 = 36
it2->ans1 = 38
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 29
it2->ans1 = 31
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 29
it2->ans1 = 31
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 29
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 29
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 27
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 6
it2->ans1 = 13
it2->ans1 = 6
it2->ans1 = 13
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 8
it2->ans1 = 6
it2->ans1 = 8
it2->ans1 = 6
it2->ans1 = 8
it2->ans1 = 6
it2->ans1 = 6
RETURNING FINAL ANSWERS




Your answer: 36 42 38 18 20 23 25 29 31 27 6 13 8 
Correct answer: 6 8 13 18 20 23 25 27 29 31 36 38 42 
30 - ParentStar :: 
stmt s;
Select s such that Parent* (_, s)
7,8,9,10,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,38,39,40,41,42,43,44,45
5000
Evaluating query 30 - ParentStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(_, s)

 EVALUATING PARENT* (_ s)
Initialzing all Parent* variables
If both tokens are alpha or one of them is a wildcard
Token2 does not Exist in Linkages
sb is Empty: 0
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Token = _ and Parent = 6
Iterating token 2 set Sb
Token = _ and Parent = 6
Iterating token 2 set Sb
Token = _ and Parent = 8
Token = _ and Parent = 6
Iterating token 2 set Sb
Token = _ and Parent = 8
Token = _ and Parent = 6
Iterating token 2 set Sb
Token = _ and Parent = 8
Token = _ and Parent = 6
Iterating token 2 set Sb
Token = _ and Parent = 6
Iterating token 2 set Sb
Token = _ and Parent = 6
Iterating token 2 set Sb
Token = _ and Parent = 13
Token = _ and Parent = 6
Iterating token 2 set Sb
Token = _ and Parent = 13
Token = _ and Parent = 6
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 23
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 23
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 25
Token = _ and Parent = 23
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 25
Token = _ and Parent = 23
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 27
Token = _ and Parent = 25
Token = _ and Parent = 23
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 25
Token = _ and Parent = 23
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 29
Token = _ and Parent = 25
Token = _ and Parent = 23
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 29
Token = _ and Parent = 25
Token = _ and Parent = 23
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 31
Token = _ and Parent = 29
Token = _ and Parent = 25
Token = _ and Parent = 23
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Token = _ and Parent = 31
Token = _ and Parent = 29
Token = _ and Parent = 25
Token = _ and Parent = 23
Token = _ and Parent = 20
Token = _ and Parent = 18
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Token = _ and Parent = 36
Iterating token 2 set Sb
Token = _ and Parent = 36
Iterating token 2 set Sb
Token = _ and Parent = 38
Token = _ and Parent = 36
Iterating token 2 set Sb
Token = _ and Parent = 38
Token = _ and Parent = 36
Iterating token 2 set Sb
Token = _ and Parent = 38
Token = _ and Parent = 36
Iterating token 2 set Sb
Token = _ and Parent = 36
Iterating token 2 set Sb
Token = _ and Parent = 42
Token = _ and Parent = 36
Iterating token 2 set Sb
Token = _ and Parent = 42
Token = _ and Parent = 36
Iterating token 2 set Sb
Token = _ and Parent = 42
Token = _ and Parent = 36
Iterating token 2 set Sb
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 82
FIRST PARAM = _
SECOND PARAM = s
it2->ans2 = 45
it2->ans2 = 45
it2->ans2 = 44
it2->ans2 = 44
it2->ans2 = 43
it2->ans2 = 43
it2->ans2 = 42
it2->ans2 = 41
it2->ans2 = 41
it2->ans2 = 40
it2->ans2 = 40
it2->ans2 = 39
it2->ans2 = 39
it2->ans2 = 38
it2->ans2 = 37
it2->ans2 = 33
it2->ans2 = 33
it2->ans2 = 33
it2->ans2 = 33
it2->ans2 = 33
it2->ans2 = 33
it2->ans2 = 32
it2->ans2 = 32
it2->ans2 = 32
it2->ans2 = 32
it2->ans2 = 32
it2->ans2 = 32
it2->ans2 = 31
it2->ans2 = 31
it2->ans2 = 31
it2->ans2 = 31
it2->ans2 = 31
it2->ans2 = 30
it2->ans2 = 30
it2->ans2 = 30
it2->ans2 = 30
it2->ans2 = 30
it2->ans2 = 29
it2->ans2 = 29
it2->ans2 = 29
it2->ans2 = 29
it2->ans2 = 28
it2->ans2 = 28
it2->ans2 = 28
it2->ans2 = 28
it2->ans2 = 28
it2->ans2 = 27
it2->ans2 = 27
it2->ans2 = 27
it2->ans2 = 27
it2->ans2 = 26
it2->ans2 = 26
it2->ans2 = 26
it2->ans2 = 26
it2->ans2 = 25
it2->ans2 = 25
it2->ans2 = 25
it2->ans2 = 24
it2->ans2 = 24
it2->ans2 = 24
it2->ans2 = 23
it2->ans2 = 23
it2->ans2 = 22
it2->ans2 = 22
it2->ans2 = 21
it2->ans2 = 21
it2->ans2 = 20
it2->ans2 = 19
it2->ans2 = 15
it2->ans2 = 15
it2->ans2 = 14
it2->ans2 = 14
it2->ans2 = 13
it2->ans2 = 12
it2->ans2 = 11
it2->ans2 = 11
it2->ans2 = 10
it2->ans2 = 10
it2->ans2 = 9
it2->ans2 = 9
it2->ans2 = 8
it2->ans2 = 7
RETURNING FINAL ANSWERS




Your answer: 45 44 43 42 41 40 39 38 37 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 15 14 13 12 11 10 9 8 7 
Correct answer: 7 8 9 10 11 12 13 14 15 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 37 38 39 40 41 42 43 44 45 
31 - ParentStar :: 
stmt s;
Select s such that Parent* (s, 10)
6,8
5000
Evaluating query 31 - ParentStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(s, 10)

 EVALUATING PARENT* (s 10)
Initialzing all Parent* variables
tk2 is Integer 10
TOKEN1 FOUND NOT TO EXIST IN LINKAGES
Set is Empty: 0
Insert stmtNum = 8 into set
Insert stmtNum = 6 into set
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 2
FIRST PARAM = s
it2->ans1 = 6
it2->ans1 = 8
RETURNING FINAL ANSWERS




Your answer: 6 8 
Correct answer: 6 8 
32 - ParentStar :: 
stmt s;
Select s such that Parent* (7, s)
none
5000
Evaluating query 32 - ParentStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(7, s)

 EVALUATING PARENT* (7 s)
Initialzing all Parent* variables
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
token in selectedSyn = s p.size = 0
FIRST PARAM = 7
SECOND PARAM = s
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
33 - ParentStar :: 
stmt s, s1;
Select s such that Parent* (s, s1)
6,8,13,18,20,23,25,27,29,31,36,38,42
5000
Evaluating query 33 - ParentStar :: 
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(s, s1)

 EVALUATING PARENT* (s s1)
Initialzing all Parent* variables
If both tokens are alpha or one of them is a wildcard
Token2 does not Exist in Linkages
sb is Empty: 0
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
Iterating token 2 set Sb
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
--INSERTING s1--
s1 Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 82
FIRST PARAM = s
it2->ans1 = 36
it2->ans1 = 42
it2->ans1 = 36
it2->ans1 = 42
it2->ans1 = 36
it2->ans1 = 42
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 38
it2->ans1 = 36
it2->ans1 = 38
it2->ans1 = 36
it2->ans1 = 38
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 29
it2->ans1 = 31
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 29
it2->ans1 = 31
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 29
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 29
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 27
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 25
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 23
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 18
it2->ans1 = 20
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 6
it2->ans1 = 13
it2->ans1 = 6
it2->ans1 = 13
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 8
it2->ans1 = 6
it2->ans1 = 8
it2->ans1 = 6
it2->ans1 = 8
it2->ans1 = 6
it2->ans1 = 6
RETURNING FINAL ANSWERS




Your answer: 36 42 38 18 20 23 25 29 31 27 6 13 8 
Correct answer: 6 8 13 18 20 23 25 27 29 31 36 38 42 
34 - ParentStar :: 
stmt s;
Select s such that Parent* (7, 11)
none
5000
Evaluating query 34 - ParentStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(7, 11)

 EVALUATING PARENT* (7 11)
Initialzing all Parent* variables
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
35 - ParentStar :: 
stmt s;
Select s such that Parent* (7, _)
none
5000
Evaluating query 35 - ParentStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(7, _)

 EVALUATING PARENT* (7 _)
Initialzing all Parent* variables
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
36 - ParentStar :: 
stmt s;
Select s such that Parent* (_, 11)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 36 - ParentStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
parent*(_, 11)

 EVALUATING PARENT* (_ 11)
Initialzing all Parent* variables
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
37 - Calls :: 
procedure p;
Select p such that Calls (_, _)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 37 - Calls :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls(_, _)

 EVALUATING CALLS (_ _)
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
38 - Calls :: 
procedure p;
Select p such that Calls (p, _)
Alpha,Bravo,Delta
5000
Evaluating query 38 - Calls :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls(p, _)

 EVALUATING CALLS (p _)
it = 1 it2 = 2
it = 1 it2 = 4
it = 2 it2 = 3
it = 4 it2 = 2
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 4
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Delta 
Correct answer: Alpha Bravo Delta 
39 - Calls :: 
procedure p;
Select p such that Calls (_, p)
Bravo,Charlie,Delta
5000
Evaluating query 39 - Calls :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls(_, p)

 EVALUATING CALLS (_ p)
it = 1 it2 = 2
it = 1 it2 = 4
it = 2 it2 = 3
it = 4 it2 = 2
In intersect Pairs: both do not exist
Insert links for tk2 = p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 4
FIRST PARAM = _
SECOND PARAM = p
it2->ans2 = 2
it2->ans2 = 4
it2->ans2 = 3
it2->ans2 = 2
RETURNING FINAL ANSWERS




Your answer: Bravo Delta Charlie 
Correct answer: Bravo Charlie Delta 
40 - Calls :: 
procedure p;
Select p such that Calls (p, "Bravo")
Alpha,Delta
5000
Evaluating query 40 - Calls :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls(p, "Bravo")

 EVALUATING CALLS (p "Bravo")
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 2
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Delta 
Correct answer: Alpha Delta 
41 - Calls :: 
procedure p;
Select p such that Calls ("Bravo", p)
Charlie
5000
Evaluating query 41 - Calls :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls("Bravo", p)

 EVALUATING CALLS ("Bravo" p)
Call - Pushing Pair (2 3)
In intersect Pairs: both do not exist
Insert links for tk2 = p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 1
FIRST PARAM = "Bravo"
SECOND PARAM = p
it2->ans2 = 3
RETURNING FINAL ANSWERS




Your answer: Charlie 
Correct answer: Charlie 
42 - Calls :: 
procedure p, p1;
Select p such that Calls (p, p1)
Alpha,Bravo,Delta
5000
Evaluating query 42 - Calls :: 
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
calls(p, p1)

 EVALUATING CALLS (p p1)
it = 1 it2 = 2
it = 1 it2 = 4
it = 2 it2 = 3
it = 4 it2 = 2
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Insert links for tk2 = p1
--INSERTING p1--
p1 Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 4
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Delta 
Correct answer: Alpha Bravo Delta 
43 - Calls :: 
procedure p;
Select p such that Calls ("Alpha", "Bravo")
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 43 - Calls :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls("Alpha", "Bravo")

 EVALUATING CALLS ("Alpha" "Bravo")
supposed
AlphaBravo
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
44 - Calls :: 
procedure p;
Select p such that Calls ("Alpha", _)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 44 - Calls :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls("Alpha", _)

 EVALUATING CALLS ("Alpha" _)
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
45 - Calls :: 
procedure p;
Select p such that Calls (_, "Bravo")
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 45 - Calls :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls(_, "Bravo")

 EVALUATING CALLS (_ "Bravo")
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
46 - CallsStar :: 
procedure p;
Select p such that Calls* (_, _)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 46 - CallsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls*(_, _)

 EVALUATING CALLS* (_ _)
---STARTING CALLS STAR---
tk1=_ and tk2=_
In intersect Pairs: both do not exist
---END OF CALLS STAR---
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
47 - CallsStar :: 
procedure p;
Select p such that Calls* (p, _)
Alpha,Bravo,Delta
5000
Evaluating query 47 - CallsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls*(p, _)

 EVALUATING CALLS* (p _)
---STARTING CALLS STAR---
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END OF CALLS STAR---
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 3
FIRST PARAM = p
it2->ans1 = 4
it2->ans1 = 2
it2->ans1 = 1
RETURNING FINAL ANSWERS




Your answer: Delta Bravo Alpha 
Correct answer: Alpha Bravo Delta 
48 - CallsStar :: 
procedure p;
Select p such that Calls* (_, p)
Bravo,Charlie,Delta
5000
Evaluating query 48 - CallsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls*(_, p)

 EVALUATING CALLS* (_ p)
---STARTING CALLS STAR---
In intersect Pairs: both do not exist
Insert links for tk2 = p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END OF CALLS STAR---
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 3
FIRST PARAM = _
SECOND PARAM = p
it2->ans2 = 4
it2->ans2 = 3
it2->ans2 = 2
RETURNING FINAL ANSWERS




Your answer: Delta Charlie Bravo 
Correct answer: Bravo Charlie Delta 
49 - CallsStar :: 
procedure p;
Select p such that Calls* (p, "Charlie")
Alpha,Bravo,Delta
5000
Evaluating query 49 - CallsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls*(p, "Charlie")

 EVALUATING CALLS* (p "Charlie")
---STARTING CALLS STAR---
in recursiveInverseCall currentIndex = 3
inserting 2
in recursiveInverseCall currentIndex = 2
inserting 1
in recursiveInverseCall currentIndex = 1
inserting 4
in recursiveInverseCall currentIndex = 4
inserting 1
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END OF CALLS STAR---
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 3
FIRST PARAM = p
it2->ans1 = 4
it2->ans1 = 1
it2->ans1 = 2
RETURNING FINAL ANSWERS




Your answer: Delta Alpha Bravo 
Correct answer: Alpha Bravo Delta 
50 - CallsStar :: 
procedure p;
Select p such that Calls* ("Alpha", p)
Bravo,Charlie,Delta
5000
Evaluating query 50 - CallsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls*("Alpha", p)

 EVALUATING CALLS* ("Alpha" p)
---STARTING CALLS STAR---
in recursive Call
rootindex = 1 currentIndex= 1
after getting called
in recursive Call
rootindex = 1 currentIndex= 2
after getting called
in recursive Call
rootindex = 1 currentIndex= 3
after getting called
in recursive Call
rootindex = 1 currentIndex= 4
after getting called
In intersect Pairs: both do not exist
Insert links for tk2 = p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END OF CALLS STAR---
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 4
FIRST PARAM = "Alpha"
SECOND PARAM = p
it2->ans2 = 2
it2->ans2 = 4
it2->ans2 = 3
it2->ans2 = 2
RETURNING FINAL ANSWERS




Your answer: Bravo Delta Charlie 
Correct answer: Bravo Charlie Delta 
51 - CallsStar :: 
procedure p, p1;
Select p such that Calls* (p, p1)
Alpha,Bravo,Delta
5000
Evaluating query 51 - CallsStar :: 
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
calls*(p, p1)

 EVALUATING CALLS* (p p1)
---STARTING CALLS STAR---
tk1 = p and tk2 = p1
in recursive Call
rootindex = 1 currentIndex= 1
after getting called
in recursive Call
rootindex = 1 currentIndex= 2
after getting called
in recursive Call
rootindex = 1 currentIndex= 3
after getting called
in recursive Call
rootindex = 1 currentIndex= 4
after getting called
in recursive Call
rootindex = 2 currentIndex= 2
after getting called
in recursive Call
rootindex = 3 currentIndex= 3
after getting called
in recursive Call
rootindex = 4 currentIndex= 4
after getting called
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Insert links for tk2 = p1
--INSERTING p1--
p1 Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END OF CALLS STAR---
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 6
FIRST PARAM = p
it2->ans1 = 4
it2->ans1 = 2
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
RETURNING FINAL ANSWERS




Your answer: Delta Bravo Alpha 
Correct answer: Alpha Bravo Delta 
52 - CallsStar :: 
procedure p;
Select p such that Calls* ("Alpha", "Charlie")
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 52 - CallsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls*("Alpha", "Charlie")

 EVALUATING CALLS* ("Alpha" "Charlie")
---STARTING CALLS STAR---
rootIndex = 1 currentIndex = 1 targetIndex = 3
Iterating throught called vector. *i = 2
rootIndex = 1 currentIndex = 2 targetIndex = 3
Iterating throught called vector. *i = 3
recursiveCallBoolean returns TRUE
Iterating throught called vector. *i = 4
rootIndex = 1 currentIndex = 4 targetIndex = 3
Iterating throught called vector. *i = 2
In intersect Pairs: both do not exist
---END OF CALLS STAR---
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
53 - CallsStar :: 
procedure p;
Select p such that Calls* ("Alpha", _)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 53 - CallsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls*("Alpha", _)

 EVALUATING CALLS* ("Alpha" _)
---STARTING CALLS STAR---
In intersect Pairs: both do not exist
---END OF CALLS STAR---
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
54 - CallsStar :: 
procedure p;
Select p such that Calls* (_, "Charlie")
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 54 - CallsStar :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
calls*(_, "Charlie")

 EVALUATING CALLS* (_ "Charlie")
---STARTING CALLS STAR---
In intersect Pairs: both do not exist
---END OF CALLS STAR---
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
55 - Modifies :: 
procedure p;
Select p such that Modifies (_, _)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 55 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(_, _)

 EVALUATING MODIFIES (_ _)
Modifies(_,_)
flag is true
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
56 - Modifies :: 
procedure p;
Select p such that Modifies (p, _)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 56 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(p, _)

 EVALUATING MODIFIES (p _)
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 37
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
57 - Modifies :: 
procedure p;
Select p such that Modifies (_, p)
none
5000
Evaluating query 57 - Modifies :: 




Your answer: 
Correct answer: 
58 - Modifies :: 
procedure p;
Select p such that Modifies (p, "a")
Alpha,Bravo,Delta
5000
Evaluating query 58 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(p, "a")

 EVALUATING MODIFIES (p "a")
In Modifies(p, "var")
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 3
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Delta 
Correct answer: Alpha Bravo Delta 
59 - Modifies :: 
procedure p; variable v;
Select p such that Modifies (p, v)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 59 - Modifies :: 
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(p, v)

 EVALUATING MODIFIES (p v)
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Insert links for tk2 = v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 37
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
60 - Modifies :: 
procedure p;
Select p such that Modifies ("Alpha", "a")
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 60 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies("Alpha", "a")

 EVALUATING MODIFIES ("Alpha" "a")
Modifies("Procname", "VarName")
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
61 - Modifies :: 
procedure p;
Select p such that Modifies ("Alpha", _)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 61 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies("Alpha", _)

 EVALUATING MODIFIES ("Alpha" _)
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
62 - Modifies :: 
stmt s;
Select s such that Modifies (_, _)
none
5000
Evaluating query 62 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(_, _)

 EVALUATING MODIFIES (_ _)
Modifies(_,_)
flag is true
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 
Missing: 
Additional: 1 10 11 12 13 14 15 16 17 18 19 2 20 21 22 23 24 25 26 27 28 29 3 30 31 32 33 34 35 36 37 38 39 4 40 41 42 43 44 45 46 5 6 7 8 9 
63 - Modifies :: 
stmt s;
Select s such that Modifies (s, _)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 63 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(s, _)

 EVALUATING MODIFIES (s _)
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 144
FIRST PARAM = s
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 5
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 7
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 9
it2->ans1 = 10
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 13
it2->ans1 = 14
it2->ans1 = 15
it2->ans1 = 16
it2->ans1 = 17
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 19
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 21
it2->ans1 = 22
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 24
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 26
it2->ans1 = 27
it2->ans1 = 28
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 30
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 32
it2->ans1 = 33
it2->ans1 = 33
it2->ans1 = 33
it2->ans1 = 33
it2->ans1 = 34
it2->ans1 = 34
it2->ans1 = 34
it2->ans1 = 34
it2->ans1 = 35
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 37
it2->ans1 = 38
it2->ans1 = 38
it2->ans1 = 38
it2->ans1 = 39
it2->ans1 = 40
it2->ans1 = 41
it2->ans1 = 42
it2->ans1 = 42
it2->ans1 = 42
it2->ans1 = 43
it2->ans1 = 44
it2->ans1 = 45
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
64 - Modifies :: 
variable v;
Select v such that Modifies (_, v)
none
5000
Evaluating query 64 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(_, v)

 EVALUATING MODIFIES (_ v)
In intersect Pairs: both do not exist
Insert links for tk2 = v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = v p.size = 37
FIRST PARAM = _
SECOND PARAM = v
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
RETURNING FINAL ANSWERS




Your answer: a b c d e x y h i k j 
Correct answer: 
Missing: 
Additional: a b c d e h i j k x y 
65 - Modifies :: 
stmt s;
Select s such that Modifies (s, "b")
2,6,8,11,12,17,46
5000
Evaluating query 65 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(s, "b")

 EVALUATING MODIFIES (s "b")
2
answer is empty: 0
modifiesAnswer2 2
modifiesAnswer6 2
modifiesAnswer8 2
modifiesAnswer11 2
modifiesAnswer12 2
modifiesAnswer17 2
modifiesAnswer46 2
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 7
FIRST PARAM = s
it2->ans1 = 2
it2->ans1 = 6
it2->ans1 = 8
it2->ans1 = 11
it2->ans1 = 12
it2->ans1 = 17
it2->ans1 = 46
RETURNING FINAL ANSWERS




Your answer: 2 6 8 11 12 17 46 
Correct answer: 2 6 8 11 12 17 46 
66 - Modifies :: 
variable v;
Select v such that Modifies (6, v)
a,x,y,b,c,d,e,h,i,j,k
5000
Evaluating query 66 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(6, v)

 EVALUATING MODIFIES (6 v)
In intersect Pairs: both do not exist
Insert links for tk2 = v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = v p.size = 11
FIRST PARAM = 6
SECOND PARAM = v
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
RETURNING FINAL ANSWERS




Your answer: a b c d e x y h i k j 
Correct answer: a x y b c d e h i j k 
67 - Modifies :: 
stmt s; variable v;
Select v such that Modifies (s, v)
a,b,c,d,e,x,y,h,i,j,k
5000
Evaluating query 67 - Modifies :: 
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(s, v)

 EVALUATING MODIFIES (s v)
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Insert links for tk2 = v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = v p.size = 144
FIRST PARAM = s
SECOND PARAM = v
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 1
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 6
it2->ans2 = 6
it2->ans2 = 6
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 4
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 4
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 6
it2->ans2 = 6
it2->ans2 = 6
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 8
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 9
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 11
it2->ans2 = 11
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 11
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 4
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 7
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
RETURNING FINAL ANSWERS




Your answer: a b c d e x y h i k j 
Correct answer: a b c d e x y h i j k 
68 - Modifies :: 
stmt s;
Select s such that Modifies ("a", "b")
none
5000
Evaluating query 68 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies("a", "b")

 EVALUATING MODIFIES ("a" "b")
Modifies("Procname", "VarName")
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
69 - Modifies :: 
stmt s;
Select s such that Modifies (6, _)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 69 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(6, _)

 EVALUATING MODIFIES (6 _)
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
70 - Modifies :: 
stmt s;
Select s such that Modifies (_, "b")
none
5000
Evaluating query 70 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(_, "b")

 EVALUATING MODIFIES (_ "b")
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 
Missing: 
Additional: 1 10 11 12 13 14 15 16 17 18 19 2 20 21 22 23 24 25 26 27 28 29 3 30 31 32 33 34 35 36 37 38 39 4 40 41 42 43 44 45 46 5 6 7 8 9 
71 - Uses :: 
procedure p;
Select p such that Uses (_, _)
none
5000
Evaluating query 71 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(_, _)

 EVALUATING USES (_ _)
Uses(_,_)
flag is true
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: 
Missing: 
Additional: Alpha Bravo Charlie Delta 
72 - Uses :: 
procedure p;
Select p such that Uses (p, _)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 72 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(p, _)

 EVALUATING USES (p _)
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 35
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
73 - Uses :: 
procedure p;
Select p such that Uses (p, "a")
Alpha,Bravo,Delta
5000
Evaluating query 73 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(p, "a")

 EVALUATING USES (p "a")
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 3
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Delta 
Correct answer: Alpha Bravo Delta 
74 - Uses :: 
procedure p; variable v;
Select p such that Uses ("Bravo", v)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 74 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses("Bravo", v)

 EVALUATING USES ("Bravo" v)
In intersect Pairs: both do not exist
Insert links for tk2 = v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
75 - Uses :: 
procedure p; variable v;
Select p such that Uses (p, v)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 75 - Uses :: 
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(p, v)

 EVALUATING USES (p v)
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Insert links for tk2 = v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 35
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
76 - Uses :: 
procedure p;
Select p such that Uses ("Bravo", "b")
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 76 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses("Bravo", "b")

 EVALUATING USES ("Bravo" "b")
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
77 - Uses :: 
procedure p;
Select p such that Uses ("Bravo", _)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 77 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses("Bravo", _)

 EVALUATING USES ("Bravo" _)
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
78 - Uses :: 
procedure p;
Select p such that Uses (_, _)
none
5000
Evaluating query 78 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(_, _)

 EVALUATING USES (_ _)
Uses(_,_)
flag is true
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: 
Missing: 
Additional: Alpha Bravo Charlie Delta 
79 - Uses :: 
procedure p;
Select p such that Uses (p, _)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 79 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(p, _)

 EVALUATING USES (p _)
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 35
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
80 - Uses :: 
procedure p;
Select p such that Uses (p, "b")
Alpha,Bravo,Delta
5000
Evaluating query 80 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(p, "b")

 EVALUATING USES (p "b")
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 3
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Delta 
Correct answer: Alpha Bravo Delta 
81 - Uses :: 
variable v;
Select v such that Uses ("Bravo", v)
a,b,c,e,h,i,j,k,p,x
5000
Evaluating query 81 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses("Bravo", v)

 EVALUATING USES ("Bravo" v)
In intersect Pairs: both do not exist
Insert links for tk2 = v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = v p.size = 10
FIRST PARAM = "Bravo"
SECOND PARAM = v
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
it2->ans2 = 5
it2->ans2 = 6
it2->ans2 = 8
it2->ans2 = 9
it2->ans2 = 10
it2->ans2 = 11
it2->ans2 = 12
RETURNING FINAL ANSWERS




Your answer: a b c e x h i k j p 
Correct answer: a b c e h i j k p x 
82 - Uses :: 
procedure p; variable v;
Select p such that Uses (p, v)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 82 - Uses :: 
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(p, v)

 EVALUATING USES (p v)
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
Insert links for tk2 = v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 35
FIRST PARAM = p
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 1
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 2
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
83 - Uses :: 
procedure p;
Select p such that Uses ("Bravo", "b")
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 83 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses("Bravo", "b")

 EVALUATING USES ("Bravo" "b")
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
84 - Uses :: 
procedure p;
Select p such that Uses ("Bravo", _)
Alpha,Bravo,Charlie,Delta
5000
Evaluating query 84 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses("Bravo", _)

 EVALUATING USES ("Bravo" _)
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: Alpha Bravo Charlie Delta 
Correct answer: Alpha Bravo Charlie Delta 
85 - Uses :: 
stmt s;
Select s such that Uses (_, _)
none
5000
Evaluating query 85 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(_, _)

 EVALUATING USES (_ _)
Uses(_,_)
flag is true
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 
Missing: 
Additional: 1 10 11 12 13 14 15 16 17 18 19 2 20 21 22 23 24 25 26 27 28 29 3 30 31 32 33 34 35 36 37 38 39 4 40 41 42 43 44 45 46 5 6 7 8 9 
86 - Uses :: 
stmt s;
Select s such that Uses (s, _)
3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 86 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(s, _)

 EVALUATING USES (s _)
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 170
FIRST PARAM = s
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 5
it2->ans1 = 5
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 7
it2->ans1 = 7
it2->ans1 = 7
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 9
it2->ans1 = 9
it2->ans1 = 10
it2->ans1 = 10
it2->ans1 = 10
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 13
it2->ans1 = 13
it2->ans1 = 13
it2->ans1 = 14
it2->ans1 = 14
it2->ans1 = 15
it2->ans1 = 15
it2->ans1 = 17
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 19
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 22
it2->ans1 = 22
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 24
it2->ans1 = 24
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 26
it2->ans1 = 27
it2->ans1 = 27
it2->ans1 = 28
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 32
it2->ans1 = 32
it2->ans1 = 33
it2->ans1 = 33
it2->ans1 = 33
it2->ans1 = 33
it2->ans1 = 33
it2->ans1 = 34
it2->ans1 = 34
it2->ans1 = 34
it2->ans1 = 34
it2->ans1 = 34
it2->ans1 = 35
it2->ans1 = 35
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 37
it2->ans1 = 38
it2->ans1 = 38
it2->ans1 = 38
it2->ans1 = 39
it2->ans1 = 40
it2->ans1 = 41
it2->ans1 = 42
it2->ans1 = 42
it2->ans1 = 43
it2->ans1 = 44
it2->ans1 = 45
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
RETURNING FINAL ANSWERS




Your answer: 3 4 5 6 7 8 9 10 11 12 13 14 15 17 18 19 20 22 23 24 25 26 27 28 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 3 4 5 6 7 8 9 10 11 12 13 14 15 17 18 19 20 22 23 24 25 26 27 28 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
87 - Uses :: 
stmt s;
Select s such that Uses (s, "b")
3,4,5,6,7,8,9,10,11,12,13,14,15,18,19,20,22,23,24,25,29,31,32,46
5000
Evaluating query 87 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(s, "b")

 EVALUATING USES (s "b")
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 24
FIRST PARAM = s
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 5
it2->ans1 = 6
it2->ans1 = 7
it2->ans1 = 8
it2->ans1 = 9
it2->ans1 = 10
it2->ans1 = 11
it2->ans1 = 12
it2->ans1 = 13
it2->ans1 = 14
it2->ans1 = 15
it2->ans1 = 18
it2->ans1 = 19
it2->ans1 = 20
it2->ans1 = 22
it2->ans1 = 23
it2->ans1 = 24
it2->ans1 = 25
it2->ans1 = 29
it2->ans1 = 31
it2->ans1 = 32
it2->ans1 = 46
RETURNING FINAL ANSWERS




Your answer: 3 4 5 6 7 8 9 10 11 12 13 14 15 18 19 20 22 23 24 25 29 31 32 46 
Correct answer: 3 4 5 6 7 8 9 10 11 12 13 14 15 18 19 20 22 23 24 25 29 31 32 46 
88 - Uses :: 
variable v;
Select v such that Uses (10, v)
a,b,c
5000
Evaluating query 88 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(10, v)

 EVALUATING USES (10 v)
In intersect Pairs: both do not exist
Insert links for tk2 = v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = v p.size = 3
FIRST PARAM = 10
SECOND PARAM = v
it2->ans2 = 1
it2->ans2 = 2
it2->ans2 = 3
RETURNING FINAL ANSWERS




Your answer: a b c 
Correct answer: a b c 
89 - Uses :: 
stmt s; variable v;
Select s such that Uses (s, v)
3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 89 - Uses :: 
Ordering Relationships
In orderRelationships
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(s, v)

 EVALUATING USES (s v)
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Insert links for tk2 = v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 170
FIRST PARAM = s
it2->ans1 = 3
it2->ans1 = 3
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 4
it2->ans1 = 5
it2->ans1 = 5
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 6
it2->ans1 = 7
it2->ans1 = 7
it2->ans1 = 7
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 8
it2->ans1 = 9
it2->ans1 = 9
it2->ans1 = 10
it2->ans1 = 10
it2->ans1 = 10
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 11
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 12
it2->ans1 = 13
it2->ans1 = 13
it2->ans1 = 13
it2->ans1 = 14
it2->ans1 = 14
it2->ans1 = 15
it2->ans1 = 15
it2->ans1 = 17
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 18
it2->ans1 = 19
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 20
it2->ans1 = 22
it2->ans1 = 22
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 23
it2->ans1 = 24
it2->ans1 = 24
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 25
it2->ans1 = 26
it2->ans1 = 27
it2->ans1 = 27
it2->ans1 = 28
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 29
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 31
it2->ans1 = 32
it2->ans1 = 32
it2->ans1 = 33
it2->ans1 = 33
it2->ans1 = 33
it2->ans1 = 33
it2->ans1 = 33
it2->ans1 = 34
it2->ans1 = 34
it2->ans1 = 34
it2->ans1 = 34
it2->ans1 = 34
it2->ans1 = 35
it2->ans1 = 35
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 36
it2->ans1 = 37
it2->ans1 = 38
it2->ans1 = 38
it2->ans1 = 38
it2->ans1 = 39
it2->ans1 = 40
it2->ans1 = 41
it2->ans1 = 42
it2->ans1 = 42
it2->ans1 = 43
it2->ans1 = 44
it2->ans1 = 45
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
it2->ans1 = 46
RETURNING FINAL ANSWERS




Your answer: 3 4 5 6 7 8 9 10 11 12 13 14 15 17 18 19 20 22 23 24 25 26 27 28 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 3 4 5 6 7 8 9 10 11 12 13 14 15 17 18 19 20 22 23 24 25 26 27 28 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
90 - Uses :: 
stmt s;
Select s such that Uses (4, "a")
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 90 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(4, "a")

 EVALUATING USES (4 "a")
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
91 - Uses :: 
stmt s;
Select s such that Uses (4, _)
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46
5000
Evaluating query 91 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(4, _)

 EVALUATING USES (4 _)
In intersect Pairs: both do not exist
Inserting tokens into relParameters
Iterating Selected Syn
RETURNING FINAL ANSWERS




Your answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
Correct answer: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 
92 - Uses :: 
stmt s;
Select s such that Uses (s, "abc")
none
5000
Evaluating query 92 - Uses :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
uses(s, "abc")

 EVALUATING USES (s "abc")
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
token in selectedSyn = s p.size = 0
FIRST PARAM = s
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
93 - Modifies :: 
stmt s;
Select s such that Modifies (s, "abc")
none
5000
Evaluating query 93 - Modifies :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
After Ordering Relations, r.size = 1
Initializing Variables
 
modifies(s, "abc")

 EVALUATING MODIFIES (s "abc")
-1
answer is empty: 1
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
Inserting tokens into relParameters
Found Relations to be False or Empty
Iterating Selected Syn
token in selectedSyn = s p.size = 0
FIRST PARAM = s
RETURNING FINAL ANSWERS




Your answer: 
Correct answer: 
94 - Next :: 
prog_line n;
Select n such that Next (n, 10) with n = 9
9
5000
Evaluating query 94 - Next :: 
Ordering Relationships
In orderRelationships
relationships with only one alpha token found
with relationship found
After Ordering Relations, r.size = 2
Initializing Variables
 
next(n, 10)

 EVALUATING NEXT (n 10)
--INSERTING n--
n Not Found in Linkages and relIndex = 0
--END OF INSERT--
Next Table
0 has next consisting of 
1 has next consisting of 2,
2 has next consisting of 3,
3 has next consisting of 4,
4 has next consisting of 5,
5 has next consisting of 6,
6 has next consisting of 7,13,
7 has next consisting of 8,
8 has next consisting of 9,12,
9 has next consisting of 10,
10 has next consisting of 11,
11 has next consisting of 8,
12 has next consisting of 
13 has next consisting of 14,15,
14 has next consisting of 
15 has next consisting of 
16 has next consisting of 17,
17 has next consisting of 18,
18 has next consisting of 19,34,
19 has next consisting of 20,
20 has next consisting of 21,18,
21 has next consisting of 22,
22 has next consisting of 23,
23 has next consisting of 24,20,
24 has next consisting of 25,
25 has next consisting of 26,29,
26 has next consisting of 27,
27 has next consisting of 28,23,
28 has next consisting of 27,
29 has next consisting of 30,31,
30 has next consisting of 23,
31 has next consisting of 32,23,
32 has next consisting of 33,
33 has next consisting of 31,
34 has next consisting of 
35 has next consisting of 36,
36 has next consisting of 37,
37 has next consisting of 38,
38 has next consisting of 39,42,
39 has next consisting of 40,
40 has next consisting of 41,
41 has next consisting of 38,
42 has next consisting of 43,36,
43 has next consisting of 44,
44 has next consisting of 45,
45 has next consisting of 42,
Inserting tokens into relParameters
 
with(n, 9)

 EVALUATING WITH (n 9)

---START EVALUATE WITH METHOD---
Relationship Index: 1
r.tk1: n
r.tk2: 9
only 1 alpha token found
progline
null
First token NEITHER VAR NOR PROC
Index: 9
IntersectPairs tk1 Exists tk1 = n
--REMOVE PAIRS FROM REL ANS START--
In retrieveTokenEvaluatedAnswers Finding tk = n
Retrieving Token Evaluated Answers with first relationship index = 0
PRINTING ELEMENTS OF RETRIEVED TOKEN: 
9
End retrieving token
--REMOVE PAIRS FROM RELANS END--

---START REMOVE PAIRS METHOD---
RelIndex of clause with contents being removed: 0
PairIndex: 1
Insert links for tk1 =n
--INSERTING n--
n Found in Linkages
--END OF INSERT--
---END EVALUATE WITH METHOD---

Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = n p.size = 1
FIRST PARAM = n
it2->ans1 = 9
RETURNING FINAL ANSWERS




Your answer: 9 
Correct answer: 9 
95 - With :: 
stmt s;
Select s with s.stmt# = 1
1
5000
Evaluating query 95 - With :: 
Ordering Relationships
In orderRelationships
with relationship found
After Ordering Relations, r.size = 1
Initializing Variables
 
with(s, 1)

 EVALUATING WITH (s 1)

---START EVALUATE WITH METHOD---
Relationship Index: 0
r.tk1: s
r.tk2: 1
only 1 alpha token found
null
null
First token NEITHER VAR NOR PROC
Index: 1
In intersect Pairs: both do not exist
Insert links for tk1 =s
--INSERTING s--
s Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END EVALUATE WITH METHOD---

Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = s p.size = 1
FIRST PARAM = s
it2->ans1 = 1
RETURNING FINAL ANSWERS




Your answer: 1 
Correct answer: 1 
96 - With :: 
assign a;
Select a with a.stmt# = 1
1
5000
Evaluating query 96 - With :: 
Ordering Relationships
In orderRelationships
with relationship found
After Ordering Relations, r.size = 1
Initializing Variables
 
with(a, 1)

 EVALUATING WITH (a 1)

---START EVALUATE WITH METHOD---
Relationship Index: 0
r.tk1: a
r.tk2: 1
only 1 alpha token found
assign
null
First token NEITHER VAR NOR PROC
Index: 1
In intersect Pairs: both do not exist
Insert links for tk1 =a
--INSERTING a--
a Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END EVALUATE WITH METHOD---

Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = a p.size = 1
FIRST PARAM = a
it2->ans1 = 1
RETURNING FINAL ANSWERS




Your answer: 1 
Correct answer: 1 
97 - With :: 
if ifstat;
Select ifstat with ifstat.stmt# = 6
6
5000
Evaluating query 97 - With :: 
Ordering Relationships
In orderRelationships
with relationship found
After Ordering Relations, r.size = 1
Initializing Variables
 
with(ifstat, 6)

 EVALUATING WITH (ifstat 6)

---START EVALUATE WITH METHOD---
Relationship Index: 0
r.tk1: ifstat
r.tk2: 6
only 1 alpha token found
null
null
First token NEITHER VAR NOR PROC
Index: 6
In intersect Pairs: both do not exist
Insert links for tk1 =ifstat
--INSERTING ifstat--
ifstat Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END EVALUATE WITH METHOD---

Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = ifstat p.size = 1
FIRST PARAM = ifstat
it2->ans1 = 6
RETURNING FINAL ANSWERS




Your answer: 6 
Correct answer: 6 
98 - With :: 
while w;
Select w with w.stmt# = 8
8
5000
Evaluating query 98 - With :: 
Ordering Relationships
In orderRelationships
with relationship found
After Ordering Relations, r.size = 1
Initializing Variables
 
with(w, 8)

 EVALUATING WITH (w 8)

---START EVALUATE WITH METHOD---
Relationship Index: 0
r.tk1: w
r.tk2: 8
only 1 alpha token found
while
null
First token NEITHER VAR NOR PROC
Index: 8
In intersect Pairs: both do not exist
Insert links for tk1 =w
--INSERTING w--
w Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END EVALUATE WITH METHOD---

Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = w p.size = 1
FIRST PARAM = w
it2->ans1 = 8
RETURNING FINAL ANSWERS




Your answer: 8 
Correct answer: 8 
99 - With :: 
procedure p;
Select p with p.procName = "Alpha"
Alpha
5000
Evaluating query 99 - With :: 
Ordering Relationships
In orderRelationships
with relationship found
After Ordering Relations, r.size = 1
Initializing Variables
 
with(p, "Alpha")

 EVALUATING WITH (p "Alpha")

---START EVALUATE WITH METHOD---
Relationship Index: 0
r.tk1: p
r.tk2: "Alpha"
only 1 alpha token found
procedure
null
First token PROCEDURE
tk2 = "Alpha" index = 1
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END EVALUATE WITH METHOD---

Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 1
FIRST PARAM = p
it2->ans1 = 1
RETURNING FINAL ANSWERS




Your answer: Alpha 
Correct answer: Alpha 
100 - With :: 
procedure p;
Select p with p.procName = "Charlie"
Charlie
5000
Evaluating query 100 - With :: 
Ordering Relationships
In orderRelationships
with relationship found
After Ordering Relations, r.size = 1
Initializing Variables
 
with(p, "Charlie")

 EVALUATING WITH (p "Charlie")

---START EVALUATE WITH METHOD---
Relationship Index: 0
r.tk1: p
r.tk2: "Charlie"
only 1 alpha token found
procedure
null
First token PROCEDURE
tk2 = "Charlie" index = 3
In intersect Pairs: both do not exist
Insert links for tk1 =p
--INSERTING p--
p Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END EVALUATE WITH METHOD---

Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = p p.size = 1
FIRST PARAM = p
it2->ans1 = 3
RETURNING FINAL ANSWERS




Your answer: Charlie 
Correct answer: Charlie 
101 - With :: 
variable v;
Select v with v.varName = "a"
a
5000
Evaluating query 101 - With :: 
Ordering Relationships
In orderRelationships
with relationship found
After Ordering Relations, r.size = 1
Initializing Variables
 
with(v, "a")

 EVALUATING WITH (v "a")

---START EVALUATE WITH METHOD---
Relationship Index: 0
r.tk1: v
r.tk2: "a"
only 1 alpha token found
variable
null
First token VARIABLE
tk2 = "a" index = 1
In intersect Pairs: both do not exist
Insert links for tk1 =v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END EVALUATE WITH METHOD---

Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = v p.size = 1
FIRST PARAM = v
it2->ans1 = 1
RETURNING FINAL ANSWERS




Your answer: a 
Correct answer: a 
102 - With :: 
variable v;
Select v with v.varName = "h"
h
5000
Evaluating query 102 - With :: 
Ordering Relationships
In orderRelationships
with relationship found
After Ordering Relations, r.size = 1
Initializing Variables
 
with(v, "h")

 EVALUATING WITH (v "h")

---START EVALUATE WITH METHOD---
Relationship Index: 0
r.tk1: v
r.tk2: "h"
only 1 alpha token found
variable
null
First token VARIABLE
tk2 = "h" index = 8
In intersect Pairs: both do not exist
Insert links for tk1 =v
--INSERTING v--
v Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END EVALUATE WITH METHOD---

Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = v p.size = 1
FIRST PARAM = v
it2->ans1 = 8
RETURNING FINAL ANSWERS




Your answer: h 
Correct answer: h 
103 - With :: 
call c;
Select c with c.procName = "Bravo"
11,46
5000
Evaluating query 103 - With :: 
Ordering Relationships
In orderRelationships
with relationship found
After Ordering Relations, r.size = 1
Initializing Variables
 
with(c, "Bravo")

 EVALUATING WITH (c "Bravo")

---START EVALUATE WITH METHOD---
Relationship Index: 0
r.tk1: c
r.tk2: "Bravo"
only 1 alpha token found
call
procedure
call.procName
loop
procedure name is Bravo
procedure index is 2
callstmts is empty: 0
Pushing back 11
Pushing back 46
In intersect Pairs: both do not exist
Insert links for tk1 =c
--INSERTING c--
c Not Found in Linkages and relIndex = 0
--END OF INSERT--
---END EVALUATE WITH METHOD---

Inserting tokens into relParameters
Iterating Selected Syn
token in selectedSyn = c p.size = 2
FIRST PARAM = c
it2->ans1 = 11
it2->ans1 = 46
RETURNING FINAL ANSWERS




Your answer: 11 46 
Correct answer: 11 46 
End of evaluating Query File.
AutoTester Completed !
